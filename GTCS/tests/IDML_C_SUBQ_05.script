
#
#By:          Clare Taylor
#Date:        03/14/94
#Test name:   IDML_C_SUBQ_05         
#Series:      IDML_C_SUBQUERYS          
#Results:     Build P:Inserts data from subquery with WHERE clause.
#		     when no set names. W/set names ISO, give 802
#		     error on insert. W/set names DOS, works fine.
#             Build R:
#Dependency:  Requires tests.gdb database from IDML_C_SUBQ_02
#History:
#4/14/94:     Added Set names DOS437. The >=, <= string is not 
#	     auto transliterated and so must use either _CHARSET
#	     notation or set names w/dos437.  If no set names is
#	     used at all, in P, this was working fine and matching
#	     the chars.  Seemed to be doing auto translit. on the
#	     match.             
#
#Description:
#WHERE condition subquery using > and < to selectively load.
#Uses Embedded and repeats the test in ISQL for dynamic.
#

>> subq5.e
/*------------------------------------------------------------------------
  Case 4:  INSERT INTO <table><specific field>...SELECT w/WHERE >,<, >=,<=
--------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
EXEC SQL DATABASE db = "WHERE_GDB:tests.gdb";
EXEC SQL WHENEVER SQLERROR GOTO err;
EXEC SQL INCLUDE SQLCA;


static print_error()
{
    if (SQLCODE != 100)
        printf ("DATABASE ERROR, SQLCODE = %d \n", SQLCODE);
}
main()
{    /* Using DOS437 made the most sense in build P */
     EXEC SQL SET NAMES DOS437;     
     EXEC SQL CONNECT db;

     EXEC SQL DELETE FROM TEST_TABLE1;
     EXEC SQL DELETE FROM TEST_TABLE2;
     EXEC SQL COMMIT;
 
     EXEC SQL
         INSERT INTO TEST_TABLE1 (C_437_25)
	 SELECT C_437_25 FROM STRING_TABLE
		WHERE C_437_25 <= 'cæsium'
		ORDER BY C_437_25;

     EXEC SQL COMMIT;

     EXEC SQL
         INSERT INTO TEST_TABLE2 (C_437_25)
	 SELECT C_437_25 FROM STRING_TABLE
		WHERE C_437_25 >= 'cæsium'
		ORDER BY C_437_25;
     EXEC SQL COMMIT RELEASE;
     exit(0);
err: print_error();
}

>> ver5.sql 
SET NAMES DOS437;
connect "WHERE_GDB:tests.gdb";
SELECT C_437_25 FROM TEST_TABLE1 ORDER BY C_437_25;
SELECT C_437_25 FROM TEST_TABLE2 ORDER BY C_437_25;
quit;

>> subq5.sql 
SET NAMES DOS437;
connect "WHERE_GDB:tests.gdb";
delete from test_table1;
delete from test_table2;
commit;
select * from test_table1;
select * from test_table2;

INSERT INTO TEST_TABLE1 (C_437_25) 
    SELECT C_437_25 FROM STRING_TABLE 
       WHERE C_437_25 <= 'cæsium';
INSERT INTO TEST_TABLE2 (C_437_25) 
    SELECT C_437_25 FROM STRING_TABLE 
       WHERE C_437_25 >= 'cæsium';
commit;
select C_437_25 from test_table1 ORDER BY C_437_25;
select C_437_25 from test_table2 ORDER BY C_437_25;
>> subq6.sql 
SET NAMES DOS437;
connect "WHERE_GDB:tests.gdb";
delete from test_table1;
delete from test_table2;
commit;
select * from test_table1;
select * from test_table2;

INSERT INTO TEST_TABLE1 (C_437_25) 
    SELECT C_437_25 FROM STRING_TABLE 
       WHERE C_437_25 < 'cæsium';
INSERT INTO TEST_TABLE2 (C_437_25) 
    SELECT C_437_25 FROM STRING_TABLE 
       WHERE C_437_25 > 'cæsium';
commit;
select C_437_25 from test_table1 ORDER BY C_437_25;
select C_437_25 from test_table2 ORDER BY C_437_25;

$ GPRE subq5.e
$ CC FLAG_CC subq5.c
$ LINK FLAG_LINK subq5 
$ RUN subq5
$ ISQL -i ver5.sql -m
$ DELETE ver5.sql

$ ISQL -i subq6.sql -m
$ DELETE subq5* 
