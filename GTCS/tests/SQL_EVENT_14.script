
#
#Name: Sudhanshu Kumar
#This test contains two event init statement in application program.
#The secon event init statement contains more events then first one.
#

>> sql_event_14a.sql
create database "WHERE_GDB:events.gdb";

create table project  ( PNAME   VARCHAR(15) Not Null,
                        PNUMBER     INTEGER,
                        PRIZE        DOUBLE PRECISION);

insert into project values('ProductX',1,22);
insert into project values('ProductY',2,28);
insert into project values('ProductZ',3,32);
commit;
create table works_on (SSN       INTEGER Not Null,
                       PNUMBER   INTEGER Not Null,
                       HOURS     DOUBLE PRECISION);

insert into works_on values (1,1,20);
insert into works_on values (1,2,30);
insert into works_on values (3,3,40);
commit;

set term go;
create trigger trig01 for project
active after update position 1
as
declare variable x int;
begin
    insert into works_on values (4, 4, new.prize/old.prize);
     if (((new.prize/old.prize) >= 1.0) and ((new.prize/old.prize) <= 1.1))
           then post_event 'event1';
    if (((new.prize/old.prize) > 1.1) and ((new.prize/old.prize) <= 1.2))
           then post_event 'event2';
    if (((new.prize/old.prize) > 1.2) and ((new.prize/old.prize) <= 1.3))
           then post_event 'event3';

end
go
create procedure proc1 (i int) as
begin
    if (:i = 4) then
      begin
         post_event 'event4';
         insert into project values ('ProductA', :i, 36);
      end
    if (:i = 5) then
      begin
         post_event 'event5';
         insert into project values ('ProductB', :i, 31);
      end
    if (:i = 6) then
      begin
         post_event 'event6';
         insert into project values ('ProductC', :i, 30);
      end
    if (:i = 7) then
      begin
         post_event 'event7';
         insert into project values ('ProductD', :i, 21);
      end
    if (:i = 8) then
      begin
         post_event 'event8';
         insert into project values ('ProductE', :i, 21);
      end
    if (:i = 9) then
      begin
         post_event 'event9';
         insert into project values ('ProductF', :i, 21);
      end
    if (:i = 10) then
      begin
         post_event 'event10';
         insert into project values ('ProductG', :i, 21);
      end
    if (:i = 11) then
      begin
         post_event 'event11';
         insert into project values ('ProductH', :i, 21);
      end
end
go
set term ; go
exit;
$ISQL -m -I sql_event_14a.sql -sqldialect 1
>> foo.e

DATABASE DB = "WHERE_GDB:events.gdb"
# include <stdio.h>
int main()
{
  EXEC SQL
	CONNECT DB;
  EXEC SQL
	SET TRANSACTION;
  EXEC SQL
	EVENT INIT xyz DB ("event1", "event2", "event3");

  if (isc_status[1])
        isc_print_status(isc_status);

  EXEC SQL
	EVENT INIT abc DB ("event4", "event5", "event6", "event7", "event8","event9","event10","event11");

  if (isc_status[1])
        isc_print_status(isc_status);

  EXEC SQL
	EVENT WAIT xyz;
  EXEC SQL
	COMMIT WORK;

  if (isc_status[1])
        isc_print_status(isc_status);

  if (isc_events[0] )
        printf ("\nevent (event1) was posted.\n");
  if (isc_events[1] )
        printf ("\nevent (event2) was posted.\n");
  if (isc_events[2] )
        printf ("\nevent (event3) was posted.\n");

  EXEC SQL
	EVENT WAIT abc;
  EXEC SQL
	COMMIT WORK;

  if (isc_events[0] )
        printf ("\nevent (event4) was posted.\n");
  if (isc_events[1] )
        printf ("\nevent (event5) was posted.\n");
  if (isc_events[2] )
        printf ("\nevent (event6) was posted.\n");
  if (isc_events[3] )
        printf ("\nevent (event7) was posted.\n");
  if (isc_events[4] )
        printf ("\nevent (event8) was posted.\n");
  if (isc_events[5] )
        printf ("\nevent (event9) was posted.\n");
  if (isc_events[6] )
        printf ("\nevent (event10) was posted.\n");
  if (isc_events[7] )
        printf ("\nevent (event11) was posted.\n");

  EXEC SQL
	DISCONNECT DB;

 return 0;
}
$ GPRE  -n -m foo.e
$ CC FLAG_CC foo.c
$ LINK FLAG_LINK foo
$ RUN_BG foo > foo.tt1 &
$ SLEEP 1
>> sql_event_14b.sql
update project set prize = prize * 1.05  where pnumber = 1 ;
commit;
execute procedure proc1 8;
commit;
select * from project;
select * from works_on;
exit;
$ ISQL -m WHERE_GDB:events.gdb -i sql_event_14b.sql
$ SLEEP 1
$ TYPE foo.tt1
$ DROP WHERE_GDB:events.gdb
$ DELETE foo* sql_event_14*
