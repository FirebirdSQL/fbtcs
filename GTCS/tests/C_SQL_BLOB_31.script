
$ GBAK -rep sh_blobs.gbk WHERE_GDB:sh_blobs_31.gdb
>> blob031.epp
/**********************************************************************
 Purpose:               Test SQL blob  support in InterBase 4.0
 Description:           BASED_ON relation.blob-field-name.SEGMENT keyword
 Note:			This new feature was added to make it easier
			to handle blobs by declaring appropriately
			sized buffers.
 Author:                Sam Hakim, July 1, 93
 **********************************************************************/
#include <stdio.h>
#include <cstdlib>
#include <cstring>

using namespace std;

DATABASE DB = "WHERE_GDB:sh_blobs_31.gdb";
EXEC SQL	INCLUDE SQLCA;

EXEC SQL WHENEVER SQLERROR GO TO ERR_LBL;

BASED_ON MB1.COMMENT        Comment;
BASED_ON MB1.ROW_ID         Row_Id;
BASED_ON MB1.B256           BlobId;

short                       i,j,k,l;

struct Buf{
    BASED_ON MB1.B256.SEGMENT	Buffer;
    unsigned short  		BufferLen,SOB;
};
struct Buf M;

char Test[]="FETCH BCR INTO :M.Buffer";

void Underline(int i);
void EmptyBuffer(char *Bf, unsigned short L);

int main(int argc, char* argv[])
{

    int 	Count;
    short	FullFetch,PartialFetch;
    bool verbose;

    verbose = false;
    if (--argc > 0){
        if (*argv[1] == 'v' || *argv[1] == 'V')
             verbose = true;
        }

    Count = 0;
    FullFetch = PartialFetch = 0;

    printf ("Test:\n %s\n",Test);
    Underline(80);
    M.SOB = sizeof(M.Buffer);
    EmptyBuffer(M.Buffer,M.SOB);
    M.BufferLen = 0;

    EXEC SQL DECLARE TCR CURSOR FOR
             SELECT ROW_ID, B256, COMMENT
             FROM MB1 WHERE ROW_ID <3;

    EXEC SQL OPEN TCR ;

    EXEC SQL DECLARE BCR CURSOR FOR
             READ BLOB B256 FROM MB1;

    EXEC SQL FETCH TCR INTO :Row_Id,:BlobId,:Comment;

    while (!SQLCODE){
        printf ("Row_id: %d Comment: %s \n",Row_Id,Comment);

        EXEC SQL OPEN BCR USING :BlobId;
    	EXEC SQL FETCH BCR INTO :M.Buffer;

        while (SQLCODE != 100){
	    if (verbose)
                 printf("SQLCODE = %ld, BufferLen = %d FullFetch = %d\n",
		         SQLCODE,M.BufferLen,FullFetch);

            printf ("%*.*s\n",M.SOB,M.SOB,M.Buffer);
	    EmptyBuffer(M.Buffer,M.SOB);

            while (SQLCODE == 101){
                EXEC SQL FETCH BCR INTO :M.Buffer;
		PartialFetch++;
		if (verbose)
			printf ("PartialFetch = %d \n");
                printf ("%*.*s\n", M.SOB,M.SOB,M.Buffer);
		EmptyBuffer(M.Buffer,M.SOB);

            }
    	    EXEC SQL FETCH BCR INTO :M.Buffer;
	    FullFetch++;
        }
	printf("\n");
        EXEC SQL CLOSE BCR;
	if(verbose)
	      printf("\n FullFetches = %d, Partial Fetches = %d \n",
                      FullFetch,PartialFetch);
        EXEC SQL FETCH TCR INTO :Row_Id,:BlobId,:Comment;
    }
    printf("...Done\n");
	EXEC SQL CLOSE TCR;

FINISH;

return 0;

ERR_LBL:
	printf("Database error, SQLCODE = %d\n",SQLCODE);
        isc_print_status(gds_status);

	EXEC SQL
		ROLLBACK RELEASE;
	FINISH;

	return 1;
}
/***********************************************************
 * U n d e r l i n e
 * print an underline
 ***********************************************************/
void Underline(int i)
{
int j;
for (j=0;j<i;j++)
	printf("-");
printf("\n");
}
/***********************************************************
 * EmptyBuffer
 * print an underline
 ***********************************************************/
void EmptyBuffer(char *Bf, unsigned short L)
{
	for (;L;L--)
		*Bf++ = ' ';
}

$ GPRE -e blob031.epp
$ CXX FLAG_CXX blob031.cpp
$ LINK FLAG_LINK blob031
$ RUN blob031
$DROP WHERE_GDB:sh_blobs_31.gdb
$ DELETE blob031*
