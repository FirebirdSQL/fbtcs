create database "WHERE_GDB:regex.fdb";

---

create table tests (
  id integer generated by default as identity,
  str varchar(20),
  pattern varchar(20),
  expected varchar(20)
);

insert into tests (str, pattern, expected) values ('aa', '(aa){1}', null);
insert into tests (str, pattern, expected) values ('aa', '(a){1}', null);
insert into tests (str, pattern, expected) values ('a', '(a){1}', null);
insert into tests (str, pattern, expected) values ('A', '(a){1}', null);
insert into tests (str, pattern, expected) values ('á', '(a){1}', null);
insert into tests (str, pattern, expected) values ('Á', '(ã){1}', null);
insert into tests (str, pattern, expected) values ('aa', 'a{1}', null);
insert into tests (str, pattern, expected) values ('', '(1|2){0,}', null);
insert into tests (str, pattern, expected) values ('', '(1|2){1,}', null);
insert into tests (str, pattern, expected) values ('1', '(1|2){0,}', null);
insert into tests (str, pattern, expected) values ('1', '(1|2){0,1}', null);
insert into tests (str, pattern, expected) values ('1', '(1|2){1}', null);
insert into tests (str, pattern, expected) values ('12', '(1|1[2]){1}', null);
insert into tests (str, pattern, expected) values ('1212', '(1|1[2]){3,5}', null);
insert into tests (str, pattern, expected) values ('121212', '(1|1[2]){3,5}', null);
insert into tests (str, pattern, expected) values ('12121212', '(1|1[2]){3,5}', null);
insert into tests (str, pattern, expected) values ('1212121212', '(1|1[2]){3,5}', null);
insert into tests (str, pattern, expected) values ('121212121212', '(1|1[2]){3,5}', null);
insert into tests (str, pattern, expected) values ('á', '_', null);

insert into tests (str, pattern, expected) values ('1', '[1-53-7]', null);
insert into tests (str, pattern, expected) values ('2', '[1-53-7]', null);
insert into tests (str, pattern, expected) values ('4', '[1-53-7]', null);
insert into tests (str, pattern, expected) values ('6', '[1-53-7]', null);
insert into tests (str, pattern, expected) values ('8', '[1-53-7]', null);

insert into tests (str, pattern, expected) values ('1', '[1-53-78-0]', null);
insert into tests (str, pattern, expected) values ('2', '[1-53-78-0]', null);
insert into tests (str, pattern, expected) values ('4', '[1-53-78-0]', null);
insert into tests (str, pattern, expected) values ('6', '[1-53-78-0]', null);
insert into tests (str, pattern, expected) values ('8', '[1-53-78-0]', null);

insert into tests (str, pattern, expected) values ('0', '[8-0]', null);
insert into tests (str, pattern, expected) values ('1', '[8-0]', null);
insert into tests (str, pattern, expected) values ('8', '[8-0]', null);
insert into tests (str, pattern, expected) values ('9', '[8-0]', null);

insert into tests (str, pattern, expected) values ('0', '[8-09-0]', null);
insert into tests (str, pattern, expected) values ('1', '[8-09-0]', null);
insert into tests (str, pattern, expected) values ('8', '[8-09-0]', null);
insert into tests (str, pattern, expected) values ('9', '[8-09-0]', null);

insert into tests (str, pattern, expected) values ('1', '[1-53-7^4]', null);
insert into tests (str, pattern, expected) values ('2', '[1-53-7^4]', null);
insert into tests (str, pattern, expected) values ('4', '[1-53-7^4]', null);
insert into tests (str, pattern, expected) values ('6', '[1-53-7^4]', null);
insert into tests (str, pattern, expected) values ('8', '[1-53-7^4]', null);

insert into tests (str, pattern, expected) values ('1', '[1-53-7^2-5]', null);
insert into tests (str, pattern, expected) values ('2', '[1-53-7^2-5]', null);
insert into tests (str, pattern, expected) values ('4', '[1-53-7^2-5]', null);
insert into tests (str, pattern, expected) values ('6', '[1-53-7^2-5]', null);
insert into tests (str, pattern, expected) values ('8', '[1-53-7^2-5]', null);

insert into tests (str, pattern, expected) values ('1', '[1-53-7^2-53-6]', null);
insert into tests (str, pattern, expected) values ('2', '[1-53-7^2-53-6]', null);
insert into tests (str, pattern, expected) values ('4', '[1-53-7^2-53-6]', null);
insert into tests (str, pattern, expected) values ('6', '[1-53-7^2-53-6]', null);
insert into tests (str, pattern, expected) values ('8', '[1-53-7^2-53-6]', null);

insert into tests (str, pattern, expected) values ('1', '[1-53-7^5-2]', null);
insert into tests (str, pattern, expected) values ('2', '[1-53-7^5-2]', null);
insert into tests (str, pattern, expected) values ('4', '[1-53-7^5-2]', null);
insert into tests (str, pattern, expected) values ('6', '[1-53-7^5-2]', null);
insert into tests (str, pattern, expected) values ('8', '[1-53-7^5-2]', null);

select str, pattern, iif(str similar to pattern escape '\', 1, 0) from tests order by id;

STR                  PATTERN                      CASE 
==================== ==================== ============ 
aa                   (aa){1}                         1 
aa                   (a){1}                          0 
a                    (a){1}                          1 
A                    (a){1}                          0 
á                   (a){1}                          0 
Á                   (ã){1}                         0 
aa                   a{1}                            0 
                     (1|2){0,}                       1 
                     (1|2){1,}                       0 
1                    (1|2){0,}                       1 
1                    (1|2){0,1}                      1 
1                    (1|2){1}                        1 
12                   (1|1[2]){1}                     1 
1212                 (1|1[2]){3,5}                   0 
121212               (1|1[2]){3,5}                   1 
12121212             (1|1[2]){3,5}                   1 
1212121212           (1|1[2]){3,5}                   1 
121212121212         (1|1[2]){3,5}                   0 
á                   _                               0 
1                    [1-53-7]                        1 

STR                  PATTERN                      CASE 
==================== ==================== ============ 
2                    [1-53-7]                        1 
4                    [1-53-7]                        1 
6                    [1-53-7]                        1 
8                    [1-53-7]                        0 
1                    [1-53-78-0]                     1 
2                    [1-53-78-0]                     1 
4                    [1-53-78-0]                     1 
6                    [1-53-78-0]                     1 
8                    [1-53-78-0]                     0 
0                    [8-0]                           0 
1                    [8-0]                           0 
8                    [8-0]                           0 
9                    [8-0]                           0 
0                    [8-09-0]                        0 
1                    [8-09-0]                        0 
8                    [8-09-0]                        0 
9                    [8-09-0]                        0 
1                    [1-53-7^4]                      1 
2                    [1-53-7^4]                      1 
4                    [1-53-7^4]                      0 

STR                  PATTERN                      CASE 
==================== ==================== ============ 
6                    [1-53-7^4]                      1 
8                    [1-53-7^4]                      0 
1                    [1-53-7^2-5]                    1 
2                    [1-53-7^2-5]                    0 
4                    [1-53-7^2-5]                    0 
6                    [1-53-7^2-5]                    1 
8                    [1-53-7^2-5]                    0 
1                    [1-53-7^2-53-6]                 1 
2                    [1-53-7^2-53-6]                 0 
4                    [1-53-7^2-53-6]                 0 
6                    [1-53-7^2-53-6]                 0 
8                    [1-53-7^2-53-6]                 0 
1                    [1-53-7^5-2]                    1 
2                    [1-53-7^5-2]                    1 
4                    [1-53-7^5-2]                    1 
6                    [1-53-7^5-2]                    1 
8                    [1-53-7^5-2]                    0 


select str, pattern, iif(cast(str as varchar(20) character set utf8) similar to cast(pattern as varchar(20) character set utf8) escape '\', 1, 0) from tests order by id;

STR                  PATTERN                      CASE 
==================== ==================== ============ 
aa                   (aa){1}                         1 
aa                   (a){1}                          0 
a                    (a){1}                          1 
A                    (a){1}                          0 
á                   (a){1}                          0 
Á                   (ã){1}                         0 
aa                   a{1}                            0 
                     (1|2){0,}                       1 
                     (1|2){1,}                       0 
1                    (1|2){0,}                       1 
1                    (1|2){0,1}                      1 
1                    (1|2){1}                        1 
12                   (1|1[2]){1}                     1 
1212                 (1|1[2]){3,5}                   0 
121212               (1|1[2]){3,5}                   1 
12121212             (1|1[2]){3,5}                   1 
1212121212           (1|1[2]){3,5}                   1 
121212121212         (1|1[2]){3,5}                   0 
á                   _                               1 
1                    [1-53-7]                        1 

STR                  PATTERN                      CASE 
==================== ==================== ============ 
2                    [1-53-7]                        1 
4                    [1-53-7]                        1 
6                    [1-53-7]                        1 
8                    [1-53-7]                        0 
1                    [1-53-78-0]                     1 
2                    [1-53-78-0]                     1 
4                    [1-53-78-0]                     1 
6                    [1-53-78-0]                     1 
8                    [1-53-78-0]                     0 
0                    [8-0]                           0 
1                    [8-0]                           0 
8                    [8-0]                           0 
9                    [8-0]                           0 
0                    [8-09-0]                        0 
1                    [8-09-0]                        0 
8                    [8-09-0]                        0 
9                    [8-09-0]                        0 
1                    [1-53-7^4]                      1 
2                    [1-53-7^4]                      1 
4                    [1-53-7^4]                      0 

STR                  PATTERN                      CASE 
==================== ==================== ============ 
6                    [1-53-7^4]                      1 
8                    [1-53-7^4]                      0 
1                    [1-53-7^2-5]                    1 
2                    [1-53-7^2-5]                    0 
4                    [1-53-7^2-5]                    0 
6                    [1-53-7^2-5]                    1 
8                    [1-53-7^2-5]                    0 
1                    [1-53-7^2-53-6]                 1 
2                    [1-53-7^2-53-6]                 0 
4                    [1-53-7^2-53-6]                 0 
6                    [1-53-7^2-53-6]                 0 
8                    [1-53-7^2-53-6]                 0 
1                    [1-53-7^5-2]                    1 
2                    [1-53-7^5-2]                    1 
4                    [1-53-7^5-2]                    1 
6                    [1-53-7^5-2]                    1 
8                    [1-53-7^5-2]                    0 


delete from tests;

insert into tests (str, pattern, expected) values ('(12) 3456-7890', '\(__\) \"%\-%\"', '3456-7890');
insert into tests (str, pattern, expected) values ('(12) 3456-7890', '\(__\) \"%x%\"', null);
insert into tests (str, pattern, expected) values ('abc123abc456', '\"%\"abc%6', 'abc123');
insert into tests (str, pattern, expected) values ('abc123abc456', '\"%\"abc%7', null);

select substring('(12) 3456-7890' similar '\(__\) \"%\-%\"' escape '\') from rdb$database;

SUBSTRING      
============== 
3456-7890      

select substring('abc123abc456' similar '\"%\"abc%6' escape '\') from rdb$database;

SUBSTRING    
============ 
abc123       

select substring('abc123abc456' similar '\"%\"abc%7' escape '\') from rdb$database;

SUBSTRING    
============ 
<null>       


select substring(str similar pattern escape '\'), expected from tests;

SUBSTRING            EXPECTED             
==================== ==================== 
3456-7890            3456-7890            
<null>               <null>               
abc123               abc123               
<null>               <null>               


select substring('asds 12.34 asd' similar '% \"[\+\-]?[0-9]*([0-9].|.[0-9])?[0-9]*\" %' escape '\') from rdb$database;

SUBSTRING      
============== 
12.34          

select substring('asd 5 s 1234 a 12 sd' similar '% \"[\+\-]?[0-9]*\" %' escape '\') from rdb$database;

SUBSTRING            
==================== 
5                    

select substring('a 1 b' similar '%#"[0-9]*#" %' escape '#') from rdb$database;

SUBSTRING 
========= 
          


select substring('çaaaЫxЫЫcccç' similar '%aaa#"%#"ccc%' escape '#') from rdb$database;

SUBSTRING         
================= 
ЫxЫЫ           

select substring(cast('aaaЫxЫЫccc' as varchar(15) character set win1251) similar '%aaa#"%#"ccc%' escape '#') from rdb$database;

SUBSTRING       
=============== 
ЫxЫЫ         


---

exit;
