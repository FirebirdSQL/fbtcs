#
#HISTORY:
#

>> db_info.e
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef DARWIN
#include <ibase.h>
#else
#include <Firebird/ibase.h>
#endif

DATABASE DB = COMPILETIME FILENAME 'WHERE_GDB:atlas.gdb' RUNTIME db_name;

char db_name[128];
#define CHAR    unsigned char

/* The following array needs to be modified to select the db information
   the user is requesting.  Include are all the db info calls supported
   comment out info calles you are not interested in.
*/
static  char    db_items[]=
        {
/*          isc_info_reads,
          isc_info_writes,
          isc_info_fetches,
          isc_info_marks,
          isc_info_page_size,
          isc_info_num_buffers,
          isc_info_num_wal_buffers,
          isc_info_wal_buffer_size,
          isc_info_wal_ckpt_length,
          isc_info_wal_cur_ckpt_interval,
          isc_info_wal_grpc_wait_usecs,
          isc_info_wal_num_io,
          isc_info_wal_avg_io_size,
          isc_info_wal_num_commits,
          isc_info_wal_avg_grpc_size,
          isc_info_current_memory,
          isc_info_max_memory,
          isc_info_attachment_id,
          isc_info_ods_version,
          isc_info_ods_minor_version,
          isc_info_allocation,
          isc_info_sweep_interval,
          isc_info_read_seq_count,
          isc_info_read_idx_count,
          isc_info_update_count,
          isc_info_insert_count,
          isc_info_delete_count,
          isc_info_backout_count,
          isc_info_purge_count,
          isc_info_expunge_count,
          isc_info_implementation,
          isc_info_base_level,
          isc_info_version,
*/
          isc_info_no_reserve,  
/*
          isc_info_limbo,
*/
          isc_info_end
        }; 
 
static show_dbb_parameters (dbh)
long*	dbh;
{
CHAR	*d, buffer[2048], item;
int	length;
long	value_out;
long	stsvec[20];

if (!dbh)
    return;

if (gds__database_info (stsvec, &dbh, sizeof (db_items), db_items,
						sizeof (buffer), buffer))
	isc_print_status( stsvec );


for (d = buffer; *d != isc_info_end; )
    {
    value_out = 0;
    item = *d++;
    length = isc_vax_integer (d, 2);
    d += 2;
    switch (item)
	{
        case isc_info_end:
            break;

        case isc_info_reads:
	    value_out = isc_vax_integer (d, length);
            printf("Number of reads = %d \n", value_out);
            break;
 
        case isc_info_writes:
	    value_out = isc_vax_integer (d, length);
            printf("Number of writes = %d \n", value_out);
            break;
 
        case isc_info_fetches:
	    value_out = isc_vax_integer (d, length);
            printf("Number of fetchs = %d \n", value_out);
            break;
 
        case isc_info_marks:
	    value_out = isc_vax_integer (d, length);
            printf("Number of marks = %d \n", value_out);
            break;
 
        case isc_info_page_size:
	    value_out = isc_vax_integer (d, length);
            printf("Pages size = %d \n", value_out);
            break;
 
        case isc_info_num_buffers: 
	    value_out = isc_vax_integer (d, length);
            printf("Number of buffers = %d\n", value_out);
            break;
 
        case isc_info_num_wal_buffers:  
	    value_out = isc_vax_integer (d, length);
            printf("Number of wal buffers = %d \n", value_out);
            break;

        case isc_info_wal_buffer_size:  
	    value_out = isc_vax_integer (d, length);
            printf("Wal buffer size = %d \n", value_out);
            break;

        case isc_info_wal_ckpt_length:
	    value_out = isc_vax_integer (d, length);
            printf("Max check point interval = %d \n", value_out);
            break;

        case isc_info_wal_cur_ckpt_interval:
	    value_out = isc_vax_integer (d, length);
            printf("Current check point interval = %d \n", value_out);
            break;

        case isc_info_wal_grpc_wait_usecs:
	    value_out = isc_vax_integer (d, length);
            printf("Wal group commit wait = %d \n", value_out);
            break;

        case isc_info_wal_num_io:
	    value_out = isc_vax_integer (d, length);
            printf("Wal number of i\/o = %d \n", value_out);
            break;

        case isc_info_wal_avg_io_size:
	    value_out = isc_vax_integer (d, length);
            printf("Wal average i\/o size = %d \n", value_out);
            break;

        case isc_info_wal_num_commits:   
	    value_out = isc_vax_integer (d, length);
            printf("Wal number of commits = %d \n", value_out);
            break;

        case isc_info_wal_avg_grpc_size: 
	    value_out = isc_vax_integer (d, length);
            printf("Wal average group commit size = %d \n", value_out);
            break;

        case isc_info_current_memory:
	    value_out = isc_vax_integer (d, length);
            printf("Current memory size = %d \n", value_out);
            break;
 
        case isc_info_max_memory:
	    value_out = isc_vax_integer (d, length);
            printf("Max memory size = %d \n", value_out);
            break;
 
        case isc_info_attachment_id:
	    value_out = isc_vax_integer (d, length);
            printf("DB attachment id = %d \n", value_out);
            break;
 
        case isc_info_ods_version:
	    value_out = isc_vax_integer (d, length);
            printf("ODS version = %d \n", value_out);
            break;
 
        case isc_info_ods_minor_version:
	    value_out = isc_vax_integer (d, length);
            printf("Minor ODS version = %d \n", value_out);
            break;
 
        case isc_info_allocation:
	    value_out = isc_vax_integer (d, length);
            printf("Number of DB pages allocated = %d \n", value_out);
            break;
 
        case isc_info_sweep_interval:
	    value_out = isc_vax_integer (d, length);
            printf("Sweep interval = %d \n", value_out);
            break;
 
        case isc_info_read_seq_count:
	    value_out = isc_vax_integer (d, length);
            printf("Reads sequential count = %d \n", value_out);
            break;
 
        case isc_info_read_idx_count:
	    value_out = isc_vax_integer (d, length);
            printf("Reads via index count = %d \n", value_out);
            break;
 
        case isc_info_update_count:
	    value_out = isc_vax_integer (d, length);
            printf("Number of updates = %d \n", value_out);
            break;
 
        case isc_info_insert_count:
	    value_out = isc_vax_integer (d, length);
            printf("Number of inserts = %d \n", value_out);
            break;
 
        case isc_info_delete_count:
	    value_out = isc_vax_integer (d, length);
            printf("Number of deletes = %d \n", value_out);
            break;
 
        case isc_info_backout_count:
	    value_out = isc_vax_integer (d, length);
            printf("Backout count = %d \n", value_out);
            break;
 
        case isc_info_purge_count:
	    value_out = isc_vax_integer (d, length);
            printf("Purge count = %d \n", value_out);
            break;
 
        case isc_info_expunge_count:
	    value_out = isc_vax_integer (d, length);
            printf("Expunge count = %d \n", value_out);
            break;
 
        case isc_info_implementation:
	    value_out = isc_vax_integer (d, length);
            printf("Implementation = %d \n", value_out);
            break;
 
        case isc_info_base_level:
	    value_out = isc_vax_integer (d, length);
            printf("Base level = %d \n", value_out);
            break;
 
        case isc_info_version:
	    value_out = isc_vax_integer (d, length);
            printf("Info version number = %d \n", value_out);
            break;

        case isc_info_no_reserve:
            value_out = isc_vax_integer (d, length);
            printf("No reserve = %d \n", value_out  );
            if ( value_out != 1 )
            printf("Currently this always returns zero \n");
            break;
 
        case isc_info_limbo:
	    value_out = isc_vax_integer (d, length);
            printf("Transaction in limbo = %d \n", value_out);
            break;

	}
    d += length;
    }

}

main(argc, argv )
    int argc;
    char *argv[];
{


if (argc < 2)
   {
   fprintf (stderr, "No database specified on command line\n");
   exit (1);
   }

++argv;

strcpy(db_name, *argv);
 
READY db_name AS DB;

show_dbb_parameters( DB );


FINISH;

}
$GBAK -r WHERE_FILES:atlas.gbak WHERE_GDB:atlas.gdb
$GPRE -e -n -m db_info.e
$CC FLAG_CC db_info.c
$LINK FLAG_LINK db_info 
$GFIX -use full WHERE_GDB:atlas.gdb
$RUN db_info WHERE_GDB:atlas.gdb
$GBAK WHERE_GDB:atlas.gdb atlas.gbak
$GBAK -rep atlas.gbak WHERE_GDB:atlas.gdb
$RUN db_info WHERE_GDB:atlas.gdb
$DROP WHERE_GDB:atlas.gdb
$DELETE db_info* atlas.gbak
