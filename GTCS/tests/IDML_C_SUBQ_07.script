
#
#By:          Clare Taylor
#Date:        03/14/94
#Test name:   IDML_C_SUBQ_07         
#Series:      IDML_C_SUBQUERYS          
#Results:     Uses IN in a WHERE clause with a SUBQUERY to do a DELETE.
#Dependency:  Requires tests.gdb database from IDML_C_SUBQ_02
#History:
#4/14/94:     added set names under P to establish baseline results.
#             Modified verification sql scripts to use set names and
#	     select only fields for which set names applied.  Also added
#	     multiple set names/connects to control the display of the
#	     specific select.  This seems to work well and it eleminates
#	     the need for several verification scripts.
#
#	     Using set names and new NONE behavior will not allow
#	     selects of several different char set fields in one script.
#
#Description:
#INSERTS data into one test table and then uses a SUBQUERY to return
#rows that are used for the IN condition.  Rows that are IN the rows
#returned by the subquery will be DELETED from the test table.  
#Test executed in Embedded and ISQL, Dynamic SQL.
#

>> subq7.e
/*--------------------------------------------------------------------
  Case 6:  DELETE FROM <table>... WHERE a.field1 IN (subquery w/ < )
----------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
EXEC SQL DATABASE db = "WHERE_GDB:tests.gdb";
EXEC SQL WHENEVER SQLERROR GOTO err;
EXEC SQL INCLUDE SQLCA;


static print_error()
{
    if (SQLCODE != 100)
        printf ("DATABASE ERROR, SQLCODE = %d \n", SQLCODE);
}
main()
{
     EXEC SQL SET NAMES ISO8859_1; /* using ISO because < "string" is used
				      on an iso field */
     EXEC SQL CONNECT db;

     EXEC SQL DELETE FROM TEST_TABLE1;
     EXEC SQL COMMIT;
 
     EXEC SQL
         INSERT INTO TEST_TABLE1 
	 SELECT S_ROWID, C_ENUS, C_FRANCE, C_437_25 FROM STRING_TABLE;
     EXEC SQL COMMIT;

     EXEC SQL
         DELETE FROM TEST_TABLE1 
             WHERE C_FRANCE IN 
	     (SELECT C_FRANCE FROM STRING_TABLE
	     WHERE C_FRANCE < 'péché');        /* requires ISO set names */

     EXEC SQL COMMIT RELEASE;
     exit(0);
err: print_error();
}

>> doc2

=======================================================================
The verification gets a bit difficult after Build P because we cannot
do a simple select * when SET NAMES is used.  If set names is set in
version P, we may select ONLY the fields which have valid data inserted
in that character set.  In this test, the DOS437 field has dos437
code points.  A simple select * will give a transliteration error for
that field.  It will not do a transliteration from dos to iso characters.

To work around this, we use different verification scripts for each
character set: ver7, ver7b are used to check that the above program
actually inserted the data.  The order bys are used to force the same
results in display between platforms.

The SUBQ7.sql script repeats the GPRE example in DSQL.  To verify the
inserts/deletes, I experimented with using several set names statement.
This method works well in P and I can eliminate the 802 errors by
reconnecting after a set names.

>> ver7.sql 
set names iso8859_1;
connect "WHERE_GDB:tests.gdb";
select count(*) from test_table1;
SELECT S_ROWID, C_ENUS, C_FRANCE FROM TEST_TABLE1 order by c_france;
quit;

>> ver7b.sql 
set names dos437;   
connect "WHERE_GDB:tests.gdb";
select count(*) from test_table1;
SELECT S_ROWID, C_437_25 from TEST_TABLE1 order by c_437_25;
quit;

>> subq7.sql 
set names iso8859_1;
connect "WHERE_GDB:tests.gdb";
delete from test_table1;
commit;
select count(*) from test_table1;

INSERT INTO TEST_TABLE1 
    SELECT S_ROWID, C_ENUS, C_FRANCE, C_437_25 
    FROM STRING_TABLE;

select s_rowid, c_enus, c_france from test_table1 order by c_france;
commit;

set names dos437;
connect "WHERE_GDB:tests.gdb";
select s_rowid, c_437_25 from test_table1 order by c_437_25;
commit;

set names iso8859_1;
connect "WHERE_GDB:tests.gdb";

DELETE FROM TEST_TABLE1 
    WHERE C_FRANCE IN 
    (SELECT C_FRANCE FROM STRING_TABLE
     WHERE C_FRANCE < 'péché');
commit;
select s_rowid, c_enus, c_france from test_table1 order by c_france;
commit;

set names dos437;
connect "WHERE_GDB:tests.gdb";
select s_rowid, c_437_25 from test_table1 order by c_437_25;
commit;
quit;
$ GPRE subq7.e
$ CC FLAG_CC subq7.c
$ LINK FLAG_LINK subq7 
$ RUN subq7
$ ISQL -i ver7.sql -m

$ ISQL -i subq7.sql -m
$ DELETE subq7* ver7.sql ver7b.sql doc2
