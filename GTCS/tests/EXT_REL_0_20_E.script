
#*******************************************************************************
#
#Test Name:  	EXT_REL_0_20_E
#Test Level:     0
#Series Name:    EXT_LEV_0
#Date:  		July 1, 1994
#Author:  	Scott Van Voris
#Bug:		6978
#Setup Tests:    EXT_REL_0_SETUP
#Cleanup Tests:  EXT_REL_0_CLEAN
#
#Description:    This is a Level 0 test which is designed to verify an
#		error is returned when an external relation with a
#		variable-length datatype is created.
#
#		The database is connected and the tables existing in
#		the database are checked to make sure the external relation
#		was not created.  We also check to make sure the external
#		file was not created.
#
#Expected Output:       *** Since variable length datatypes are not allowed
#                        for external relations, we should get an error.
#
#			(1994-December-2 David Schnepper )
#			VARCHAR is fine in external relations.
#History:
#2-Oct-95:  Mark
#  Removed the Cleanup / Setup comments from the test.
#  Also, added WHERE_GDB and RUN drop_gdb to the tests.
#
#3-Oct-95: Marco
#  Added the WHERE_GDB_EXTERNAL, so the external file can be created
#  by the server in the correct place when accessing data remotely.
#  Also, I removed any referance to DIR external.dat and TYPE external.dat
#  which would also fail when running remotely.
#
#
#*******************************************************************************

>> varchar.e
#include <stdio.h>
#include <stdlib.h>

EXEC SQL
    INCLUDE SQLCA

EXEC SQL
    WHENEVER SQLERROR GO TO ERR_LBL;


int main()
{

EXEC SQL
   CREATE DATABASE "WHERE_GDB:ext_rel_0_20_E.gdb";


EXEC SQL
   CREATE TABLE ext_table EXTERNAL FILE "WHERE_GDB_EXTERNAL:external.dat"
        (field1 VARCHAR(10)) ;

return 0;
ERR_LBL:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	printf ("Data base error, SQLCODE = %d\n", SQLCODE);
	isc_print_status (gds__status);

    EXEC SQL
        ROLLBACK RELEASE;

    return 1;
}
>> isql.in

CONNECT "WHERE_GDB:ext_rel_0_20_E.gdb";

SHOW TABLE ext_table;

$GPRE varchar.e
$CC FLAG_CC varchar.c
$LINK FLAG_LINK varchar
$RUN varchar
$ISQL -m -input isql.in
$DROP WHERE_GDB:ext_rel_0_20_E.gdb
$DELETE_REM WHERE_GDB: WHERE_GDB_EXTERNAL: external.dat
$DELETE varchar* isql.in
