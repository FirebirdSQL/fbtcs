
$ GBAK -r WHERE_FILES:employee.gbk WHERE_GDB:employee.gdb
>> globals.c
/*
**      Name:           globals.c
**      Programmer:     Ravil A. Desai
**      Description:    Declare and define global variables which will be
**                      used by OSRI test suites. There is a corresponding
**                      "globals.h" file, which need to be included in 
**                      test cases that uses the globals.
**
**      History:
**
**      Modified        04/15/1994      
**                             add interprete_stmt()
**      Modified        03/20/1994      
**                       add print_sqlda()
**                      add print_varfield()
**     Created         11/22/93
**
*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct vary512 {
	short vary_length;
	char vary_string[513];
	} VARY512;

#ifndef DARWIN
#include <ibase.h>
#else
#include <Firebird/ibase.h>
#endif

void print_varfield(VARY512*);
void print_sqlda(XSQLDA ISC_FAR*);
void fill_db_parameter_buffer(void);
void osri_print_status(char*, ISC_STATUS*);
void interprete_stmt_info(isc_stmt_handle, char*);

char   db_param[255];
char   *pdb_param = db_param;
char   *p;
int    len;

char	atlas1[128];
char	atlas2[128];
char	foo_db[128];
char	empdb[128];

static char     count_info [] = { isc_info_sql_records };
 

void fill_db_parameter_buffer()
{

   strcpy(empdb,"WHERE_GDB:employee.gdb");
}


void osri_print_status(char *msg_string, ISC_STATUS *status)
{

  int   i, j;
  int   status_size = 20;
  char  output_str[255];
  char  *p;

  printf("%s\n", msg_string);
  printf("*** Status Vector ****\n");

  for (i = 0; i < status_size; ) {
	 for (j = 0, p = output_str;
			(j < 5 && i < status_size);
			j++, p += strlen(p), i++)
		sprintf(p, "[%2d]: %ld ", i, status[i]);
	 printf("%s\n", output_str);
  }

  printf("%s, sqlcode = %d\n", msg_string, isc_sqlcode(status));
  isc_print_status(status);
  isc_print_sqlerror (isc_sqlcode(status), status); 
}


/*-----------------------------------------------------------------
**      Need more work on how to examine DATE, ARRAY, BLOB fields.
**-----------------------------------------------------------------
*/

void print_sqlda(XSQLDA ISC_FAR *sqlda)
{
	short i;

	printf("******* SQLDA *******\n");
	printf("Version: %d, NameField: %s, ByteCount: %d\n",
		sqlda->version, sqlda->sqldaid, sqlda->sqldabc);
	printf("No.Fields alloc: %d, Actual No.Fields: %d\n",
		sqlda->sqln, sqlda->sqld);
	for (i = 0; i < sqlda->sqld; i++) {
	    printf("Field Number :%d\tLength: %d\tType: ", i+1,
		 sqlda->sqlvar[i].sqllen);
	    switch (sqlda->sqlvar[i].sqltype) {
		case SQL_TEXT+1:
			printf("TEXT\n");
			printf("Data:%s\n",(char *)(sqlda->sqlvar[i].sqldata));
			break;
		case SQL_VARYING+1:
			printf("VARYING\n");
			print_varfield((VARY512 *)((char *)(sqlda->sqlvar[i].sqldata))); 
			printf("\n");
			break;
		case SQL_SHORT+1:
			printf("SHORT\n");
			printf("Data:%d\n",*((short *)(sqlda->sqlvar[i].sqldata)));
			break;
		case SQL_LONG+1:
			printf("LONG\n");
			printf("Data:%d\n",*((long *)(sqlda->sqlvar[i].sqldata)));
			break;
		case SQL_FLOAT+1:
			printf("FLOAT\n");
			printf("Data:%f\n",*((float *)(sqlda->sqlvar[i].sqldata)));
			break;
		case SQL_DOUBLE+1:
			printf("DOUBLE\n");
			printf("Data:%f\n",*((double *)(sqlda->sqlvar[i].sqldata)));
			break;
		case SQL_D_FLOAT+1:
			printf("D_FLOAT\n");
			printf("Data:%f\n",*((double *)(sqlda->sqlvar[i].sqldata)));
			break;
		case SQL_DATE+1:
			printf("DATE\n");
			printf("Data Address:%s\n",sqlda->sqlvar[i].sqldata);
			break;
		case SQL_BLOB+1:
			printf("BLOB\n");
			printf("Data Address:%s\n",sqlda->sqlvar[i].sqldata);
			break;
		case SQL_ARRAY+1:
			printf("ARRAY\n");
			printf("Data Address:%s\n",sqlda->sqlvar[i].sqldata);
			break;
		default:
			printf("Unkowned\n");
			printf("Data Address:%s\n",sqlda->sqlvar[i].sqldata);
	    }
	    printf("\tScale: %d\tSubType: %d\n",sqlda->sqlvar[i].sqlscale, 
			sqlda->sqlvar[i].sqlsubtype);

	    printf("Indicator: %d\tColName Len: %d\tColName: %s\n",
			*((short *)(sqlda->sqlvar[i].sqlind)), sqlda->sqlvar[i].sqlname_length,
			sqlda->sqlvar[i].sqlname);
	    printf("RelName Len: %d\tRelName: %s\n",
			sqlda->sqlvar[i].relname_length, sqlda->sqlvar[i].relname);

	    printf("OwnName Len: %d\tOwnName: %s\n",
			sqlda->sqlvar[i].ownname_length, sqlda->sqlvar[i].ownname);

	    printf("AliaseName Len: %d\tAliaseName: %s\n",
			sqlda->sqlvar[i].aliasname_length, sqlda->sqlvar[i].aliasname);
	}
}


void print_varfield(VARY512 *varfield)
{
	if (!varfield)
		return;
	varfield->vary_string[varfield->vary_length] = '\0';    
	printf("%s", varfield->vary_string);
}



void interprete_stmt_info(isc_stmt_handle stmt, char *info_buffer)
{
	char count_type, count_is, *p;
	char  count_buffer[33];

	long l, count;
	long statement_type;
	ISC_STATUS status[20];
 
	count_type = 0;
	count = 0;
 

	if (info_buffer [0] == isc_info_sql_stmt_type)
	{
		l = isc_vax_integer (info_buffer + 1, 2);
		statement_type = isc_vax_integer (info_buffer + 3, l);
	}

	if (statement_type == isc_info_sql_stmt_update)
		count_type = isc_info_req_update_count;
	
	if (statement_type == isc_info_sql_stmt_delete)
		count_type = isc_info_req_delete_count;
 
	if (statement_type == isc_info_sql_stmt_select)
		count_type = isc_info_req_select_count;
 
	if (statement_type == isc_info_sql_stmt_insert)
		count_type = isc_info_req_insert_count;
 
	/* Only get counts for known statement types */
	if (count_type)
	{
		isc_dsql_sql_info (status, &stmt, sizeof (count_info),
		count_info, sizeof (count_buffer), count_buffer);

		for (p = count_buffer + 3; *p != isc_info_end; )
		{
			count_is = *p++;
			l = isc_vax_integer (p, 2);
			p += 2;
			count = isc_vax_integer (p, l);
			p += l;
			/* This is the matching count type */
			if (count_is == count_type)
			break;
		}

		/* we assume that we did get a match */
		printf ( "Rows affected:  %d\n", count);
	}
	return;
}

$ CC FLAG_CC globals.c
