
>> blob33.sql
create database "WHERE_GDB:blob33.gdb";
quit;
$ ISQL -m -i blob33.sql
>> blob33x.epp
exec sql set database db = "WHERE_GDB:blob33.gdb";
exec sql include sqlca;
exec sql whenever sqlerror goto err;

#ifdef WIN_NT
#include "windows.h" // NULL definition
#else
#include <stdlib.h>
#include <stdio.h>
#endif
#ifndef NULL
#define NULL 0
#endif

int main(int argc, char* argv[])
{
exec sql connect db;

exec sql create table big_blob (test_name char(15),comment char(30), 
row_id integer, b32k blob(32767,1), b40k blob(40960,1), b64k blob(65535,1));

exit(0);

err:
	exec sql whenever sqlerror continue;
	isc_print_status (gds_status);
	exec sql rollback;
	exec sql disconnect all;
	exit(1);
}
$ GPRE -e -n blob33x.epp
$ CXX FLAG_CXX blob33x.cpp
$ LINK FLAG_LINK blob33x 
$ RUN blob33x
>> blob33.epp
/**********************************************************************
 Purpose:               Test SQL blob support in InterBase 4.0

 Description:           Insert big 32k, 40k and 64k segements 
			WHERE_GDB:blob33.gdb. 

 Author:                Sam Hakim, June 7, 93
 
 Note:			Requested by Michael and Doc to find out the limit
			of segments for blobs.

 Bug 5198.
 **********************************************************************/
#include <stdio.h>
#include <cstdlib>
#include <cstring>

EXEC SQL SET DATABASE DB = "WHERE_GDB:blob33.gdb";
EXEC SQL INCLUDE SQLCA;
EXEC SQL WHENEVER SQLERROR GOTO ERR;

BASED_ON BIG_BLOB.TEST_NAME      Test_Name;
BASED_ON BIG_BLOB.COMMENT        Comment;
BASED_ON BIG_BLOB.ROW_ID         Row_Id;
BASED_ON BIG_BLOB.B32K		 b32k_id;
BASED_ON BIG_BLOB.B32K.SEGMENT	 b32k_segment;
BASED_ON BIG_BLOB.B40K		 b40k_id;
BASED_ON BIG_BLOB.B40K.SEGMENT	 b40k_segment;
BASED_ON BIG_BLOB.B64K		 b64k_id;
BASED_ON BIG_BLOB.B64K.SEGMENT	 b64k_segment;


int verbose,DumpRecs;

char Test[]="Populating the blob database, please wait...\n";

void Underline(int i);
void CreateSegment(char *pBuffer, unsigned short L, int LineNo);
void EmptyBuffer(char *Bf, unsigned short L);
void ErrTrap(char ModuleName[30]);

GDS_QUAD WriteBlob1(unsigned short L, char *Bf, GDS_QUAD BlobId);
GDS_QUAD WriteBlob2(unsigned short L, char *Bf, GDS_QUAD BlobId);
GDS_QUAD WriteBlob3(unsigned short L, char *Bf, GDS_QUAD BlobId);

void ReadRecords();
void ReadBlob1(unsigned short L);
void ReadBlob2(unsigned short L);
void ReadBlob3(int L);

int main(int argc,char* argv[])
{
short                       i,j,k,l;
int Count;

    verbose = DumpRecs = false;

    if (--argc > 0){
        if (*argv[1] == 'v' || *argv[1] == 'V')
            verbose = true;
    }

    if (--argc > 0){
	if (*argv[2] == 'd' || *argv[2] == 'D')
		DumpRecs = true;
    }

    EXEC SQL CONNECT DB;
    EXEC SQL SET TRANSACTION;

    strcpy(Test_Name,"BlobLoader");
    printf ("Test:\n %s\n",Test);
    Underline(strlen(Test));
  
    /* insert 2 records for each blob */ 
    for (j=1; j<3; j++){

	b32k_id = WriteBlob1(sizeof(b32k_segment), b32k_segment, b32k_id);
	b40k_id = WriteBlob2(sizeof(b40k_segment), b40k_segment, b40k_id);
	b64k_id = WriteBlob3(sizeof(b64k_segment)-1, b64k_segment, b64k_id);
    	EXEC SQL INSERT INTO big_blob (TEST_NAME,ROW_ID,B32K,B40K,B64K) 
		VALUES (:Test_Name,:j,:b32k_id,:b40k_id,:b64k_id); 

        EXEC SQL COMMIT;
    }



	ReadRecords();

	EXEC SQL DISCONNECT ALL;

exit(0);

ERR:
	if (SQLCODE < 0) {
		EXEC SQL WHENEVER SQLERROR CONTINUE;

		ErrTrap("main");
		exit(1);
	}
}
/************************************************************
 * Draw and underline
 ************************************************************/
void Underline(int i)
{
int j;

for (j=0;j<i;j++)
	printf("-");
printf("\n");

}
/***********************************************************
 * EmptyBuffer
 * print an underline
 ***********************************************************/
void EmptyBuffer(char *Bf, unsigned short L)
{
char *s;
for (s=Bf;L;L--)
	*s++ = ' ';
}
/************************************************************
 * Create a line with numbers stuffed in a char string. 
 ************************************************************/
void CreateSegment(char *pBuffer, unsigned short L, int LineNo)
{
char      TempBuf[8], *pBf;
int	  i,j;

pBf = pBuffer;

     j = 1;
     sprintf (pBf,"Line %3d:",LineNo);
     L = L - strlen(pBf) - 7;

     for (i = 1; i < L; j++){
	/* A new line so we can pull the blob into an editor */
	if ((i % 20) == 0)
		sprintf (TempBuf,"%d\n",j);
	else
		sprintf (TempBuf,"%d,",j);

	memcpy(pBf,TempBuf,strlen(TempBuf));
	pBf += strlen(TempBuf);
	i+= strlen(TempBuf);  
     }
	memcpy(pBf,"<EOL\n\0",6);

if (verbose)
 	printf("%s\n, length=%d, i = %d \n", pBf, strlen(pBuffer),i); 

}
/*******************************************************************
 * Write the blob to the database.
 *******************************************************************/
GDS_QUAD WriteBlob1(unsigned short L, char *Bf, GDS_QUAD BlobId)
{

unsigned short BfLen;
int i;

    EXEC SQL DECLARE BCW1 CURSOR FOR INSERT BLOB b32k INTO big_blob;
    EXEC SQL OPEN BCW1 INTO :BlobId; 

    for (i=1; i<3; i++){

        CreateSegment(Bf,L,i);
        BfLen = strlen(Bf);

        EXEC SQL INSERT CURSOR BCW1 VALUES (:Bf:BfLen);

        if (verbose)
            printf("SQLCODE %d, BufferLen %d \n",SQLCODE,BfLen);

        EmptyBuffer(Bf,BfLen);
    }
    sprintf (Bf,"Line %3d: --- End of BLOB b32k ---\n",i);
    BfLen = strlen(Bf);

    EXEC SQL INSERT CURSOR BCW1 VALUES (:Bf:BfLen);
    EXEC SQL CLOSE BCW1;
return (BlobId);
}
/*******************************************************************
 * Write the blob to the database.
 *******************************************************************/
GDS_QUAD WriteBlob2(unsigned short L, char *Bf, GDS_QUAD BlobId)
{
unsigned short BfLen;
int i;

    EXEC SQL DECLARE BCW2 CURSOR FOR INSERT BLOB b40k INTO big_blob;
    EXEC SQL OPEN BCW2 INTO :BlobId;  

    for (i=1; i<3; i++){

        CreateSegment(Bf,L,i);
        BfLen = strlen(Bf);

        EXEC SQL INSERT CURSOR BCW2 VALUES (:Bf:BfLen);

        if (verbose)
            printf("SQLCODE %d, BufferLen %d \n",SQLCODE,BfLen);

        EmptyBuffer(Bf,BfLen);
    }

    sprintf (Bf,"Line %3d: --- End of BLOB b40k ---\n",i);
    BfLen = strlen(Bf);

    EXEC SQL INSERT CURSOR BCW2 VALUES (:Bf:BfLen);
    EXEC SQL CLOSE BCW2;

return(BlobId);
}
/*******************************************************************
 * Write the blob to the database.
 *******************************************************************/
GDS_QUAD WriteBlob3(unsigned short L, char *Bf, GDS_QUAD BlobId)
{

unsigned short BfLen;
int i;
    EXEC SQL WHENEVER SQLERROR GOTO ERR3;

    EXEC SQL DECLARE BCW3 CURSOR FOR INSERT BLOB b64k INTO big_blob;
    EXEC SQL OPEN BCW3 INTO :BlobId;

    for (i=1; i<2; i++){

        CreateSegment(Bf,L,i);
        BfLen = strlen(Bf);
	
        EXEC SQL INSERT CURSOR BCW3 VALUES (:Bf:BfLen);

        if (verbose)
            printf("SQLCODE %d, BufferLen %d \n",SQLCODE,BfLen);

        EmptyBuffer(Bf,BfLen);
    }

    sprintf (Bf,"Line %3d: --- End of BLOB b64k ---\n",i);
    BfLen = strlen(Bf);

    EXEC SQL INSERT CURSOR BCW3 VALUES (:Bf:BfLen);
    EXEC SQL CLOSE BCW3;
ERR3:
	if (SQLCODE < 0)
		EXEC SQL WHENEVER SQLERROR CONTINUE;
		ErrTrap("WriteBlob3");

return(BlobId);
	
}
/**************************************************************
 * Read records. 
 **************************************************************/
void ReadRecords()
{
EXEC SQL WHENEVER SQLERROR CONTINUE;
EXEC SQL WHENEVER SQLERROR GO TO ReadERR;

EXEC SQL DECLARE TCR CURSOR FOR
         SELECT TEST_NAME,ROW_ID,b32k, b40k, b64k, COMMENT
         FROM big_blob WHERE TEST_NAME = 'BlobLoader';

EXEC SQL OPEN TCR;
EXEC SQL FETCH TCR 
INTO :Test_Name,:Row_Id,:b32k_id, :b40k_id, :b64k_id, :Comment;

while (SQLCODE != 100){
	printf("Test_Name: %s  Row_Id: %d  Comment: %s \n",Test_Name, Row_Id,Comment);
	ReadBlob1(sizeof(b32k_segment));
	ReadBlob2(sizeof(b40k_segment));
	ReadBlob3(sizeof(b64k_segment));

	EXEC SQL FETCH TCR 
	INTO :Test_Name,:Row_Id,:b32k_id, :b40k_id, :b64k_id, :Comment;
}
EXEC SQL CLOSE TCR;

ReadERR:
EXEC SQL WHENEVER SQLERROR CONTINUE;
	if (SQLCODE<0){
        	printf("Database error, SQLCODE = %d\n",SQLCODE);
        	isc_print_status(gds_status);
	}

}

/**************************************************************
 * Read blobs from the table.
 **************************************************************/
void ReadBlob1(unsigned short L)
{
char *Bf;
unsigned short Bl;
int BlobSize;

Bf = (char*) malloc(L);
BlobSize = 0;

EXEC SQL DECLARE BCR1 CURSOR FOR
         READ BLOB b32k FROM big_blob;

EXEC SQL OPEN BCR1 USING :b32k_id;
EXEC SQL FETCH BCR1 INTO :Bf:Bl;

while (SQLCODE != 100 || SQLCODE == 101){
        printf("%*.*s\n",Bl,Bl,Bf);
	BlobSize+= Bl;
        EXEC SQL FETCH BCR1 INTO :Bf:Bl;
 }
printf("\n");
printf("\n BlobSize = %d\n",BlobSize);
EXEC SQL CLOSE BCR1;
free(Bf);
}
/**************************************************************
 * Read blobs from the table.
 **************************************************************/
void ReadBlob2(unsigned short L)
{
char *Bf;
unsigned short Bl;
int BlobSize;

Bf = (char*) malloc(L);
BlobSize = 0;

EXEC SQL DECLARE BCR2 CURSOR FOR
         READ BLOB b40k FROM big_blob;

EXEC SQL OPEN BCR2 USING :b40k_id;
EXEC SQL FETCH BCR2 INTO :Bf:Bl;

while (SQLCODE != 100 || SQLCODE == 101){
        printf("%*.*s\n",Bl,Bl,Bf);
	BlobSize+= Bl;
        EXEC SQL FETCH BCR2 INTO :Bf:Bl;
 }
printf("\n");
printf("\n BlobSize = %d\n",BlobSize);
EXEC SQL CLOSE BCR2;
free(Bf);
}
/**************************************************************
 * Read blobs from the table.
 **************************************************************/
void ReadBlob3(int L)
{
char *Bf;
unsigned short Bl;
int BlobSize;

Bf = (char*) malloc(L);
BlobSize = 0;

EXEC SQL DECLARE BCR3 CURSOR FOR
         READ BLOB b64k FROM big_blob;

EXEC SQL OPEN BCR3 USING :b64k_id;
EXEC SQL FETCH BCR3 INTO :Bf:Bl;

while (SQLCODE != 100 || SQLCODE == 101){
        printf("%*.*s\n",Bl,Bl,Bf);
	BlobSize+= Bl;
        EXEC SQL FETCH BCR3 INTO :Bf:Bl;
 }
printf("\n");
printf("\n BlobSize = %d\n",BlobSize);
EXEC SQL CLOSE BCR3;
free(Bf);
}

void ErrTrap(char ModuleName[30])
{

EXEC SQL WHENEVER SQLERROR CONTINUE;

if (SQLCODE<0){
	printf("Module: %s Database error, SQLCODE = %d\n",ModuleName,SQLCODE);
        isc_print_status(gds_status);

	EXEC SQL ROLLBACK RELEASE;
	EXEC SQL DISCONNECT ALL;
}

}

$ GPRE -e -n blob33.epp
$ CXX FLAG_CXX blob33.cpp
$ LINK FLAG_LINK blob33 
$ RUN blob33
$ DROP WHERE_GDB:blob33.gdb
$ DELETE blob33*
