
#/*******************************************************************
#*Author: Sudhanshu Kumar
#*Trigger calls a procedure which posts an event in application program.
#*This test is same previous test only difference procedure is
#*called only when  a new pnumber is inserted in project relation.
#*This traps for error message.(Does not work)
#***********************************************************************/

>> sql_event_12a.sql

create database "WHERE_GDB:events.gdb";
create table project  ( PNAME   VARCHAR(15) Not Null,
                        PNUMBER     INTEGER);

create table works_on (SSN       INTEGER Not Null,
                       PNUMBER   INTEGER Not Null,
                       HOURS     INTEGER);

insert into project values('ProductX',1);
insert into project values('ProductY',2);
insert into project values('ProductZ',3);

insert into works_on values (1,1,1);
insert into works_on values (2,2,2);
insert into works_on values (3,3,3);

set term go;
create procedure proc1 as
begin
  post_event 'abc';
  insert into works_on values (11,11,12);
end
go
create trigger trig01 for project
active before insert position 1
as begin
  if (new.pnumber is not null) then
   execute procedure proc1;
end
go
set term ; go
exit;

$ ISQL -m -i sql_event_12a.sql

>> foo12.e
DATABASE DB = "WHERE_GDB:events.gdb"
int main()
{
  EXEC SQL
	CONNECT DB;
  EXEC SQL
	SET TRANSACTION;
  EXEC SQL
	EVENT INIT xyz DB ('abc');

  if (isc_status[1])
        isc_print_status(isc_status);

  EXEC SQL
	EVENT WAIT xyz;
  EXEC SQL
	COMMIT WORK;

  if (isc_status[1])
        isc_print_status(isc_status);
  else
  {
        sleep(1);
        printf ("\nfoo12 done, event (abc) was posted.\n");
  }
}
$ GPRE  -n -m foo12.e
$ CC FLAG_CC foo12.c
$ LINK FLAG_LINK foo12

$ RUN_BG foo12 &
$ SLEEP 1

>> sql_event_12b.sql

insert into project values('ProductA',4);
commit;
select * from project;
select * from works_on;
exit;

$ ISQL -m WHERE_GDB:events.gdb -i sql_event_12b.sql
$ SLEEP 2
$ DROP WHERE_GDB:events.gdb
$ DELETE foo12* sql_event_12*
