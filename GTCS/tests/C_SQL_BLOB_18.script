
$ GBAK -rep sh_blobs.gbk WHERE_GDB:sh_blobs_18.gdb
>> blob018.epp
/**********************************************************************
 Purpose:               Test SQL blob support in InterBase 4.0
 Description:           INSERT CURSOR - Use a local pointer to store the blob.
 Author:                Sam Hakim, June 7, 93
 **********************************************************************/
#include <stdio.h>
#include <cstdlib>
#include <cstring>

using namespace std;

DATABASE DB = "WHERE_GDB:sh_blobs_18.gdb";
EXEC SQL	INCLUDE SQLCA;
EXEC SQL
        WHENEVER SQLERROR GO TO ERR_LBL;

BASED_ON MB1.TEST_NAME      Test_Name;
BASED_ON MB1.COMMENT        Comment;
BASED_ON MB1.ROW_ID         Row_Id;
BASED_ON MB1.B512           BlobId;

bool verbose;

struct Buf{
    char            *Buffer;
    unsigned short  BufferLen;
};
struct Buf M;

char Test[]="INSERT CURSOR BCW VALUES (:M.Buffer:M.BufferLen), M.Buffer is a pointer";

void Underline(int);
void CreateLine(char *Bf,int L);
void EmptyBuffer(char *Bf,int L);

int main(int argc, char* argv[])
{
short                       i,j,k,l;
int Count;

    verbose = false;
    if (--argc > 0){
        if (*argv[1] == 'v' || *argv[1] == 'V')
            verbose = true;
        }


    Count = 0;
    strcpy(Test_Name,"blob018");
    printf ("Test:\n %s\n",Test);
    Underline(80);

    M.BufferLen = 512;
    M.Buffer = (char*) malloc(M.BufferLen);

    EXEC SQL DECLARE BCW CURSOR FOR INSERT BLOB B512 INTO MB1;

    for (j = 18; j < 19; j++){
        EXEC SQL OPEN BCW INTO :BlobId;      	/* This will change in G to INTO */

        for (i=1; i<5; i++){
            sprintf (M.Buffer,"Line: %d>",i);
            CreateLine(M.Buffer,M.BufferLen);
            EXEC SQL
                INSERT CURSOR BCW VALUES (:M.Buffer:M.BufferLen);
	   	  if (verbose)
		      printf("SQLCODE %d, BufferLen %d \n",SQLCODE,M.BufferLen);
            EmptyBuffer(M.Buffer,M.BufferLen);
        }
	EmptyBuffer(M.Buffer,M.BufferLen);
	sprintf (M.Buffer,"Line: %d> --- End of BLOB B512 ---",i);
	EXEC SQL
                INSERT CURSOR BCW VALUES (:M.Buffer:M.BufferLen);
    EXEC SQL
        CLOSE BCW;
    EXEC SQL
        INSERT INTO MB1 (TEST_NAME,ROW_ID,B512) VALUES (:Test_Name,:j,:BlobId);
    EXEC SQL COMMIT;
    }

FINISH;

return 0;

ERR_LBL:
	printf("Database error, SQLCODE = %d\n",SQLCODE);
        isc_print_status(gds_status);

	EXEC SQL
		ROLLBACK RELEASE;
	FINISH;

	return 1;
}
/************************************************************
 * Draw and underline
 ************************************************************/
void Underline(int i)
{
int j;

for (j=0;j<i;j++)
	printf("-");
printf("\n");

}
/***********************************************************
 * EmptyBuffer
 * print an underline
 ***********************************************************/
void EmptyBuffer(char *Bf,int L)
{
char *s;
for (s=Bf;L;L--)
	*s++ = ' ';
}
/************************************************************
 * Create a new line for the blob content.
 ************************************************************/
void CreateLine(char *Bf,int L)
{
char      TempBuf[5],*s;
int	  i,j,t,k;


     t = sizeof(TempBuf);
     j = 0;

     for (i = 9; i < L-5; ){
	j++;
	sprintf (TempBuf,"%3d,",j);
	strncat(Bf,TempBuf,t);
	i += t-1;	/* Ignore the terminating null */
     }
	strncat(Bf,"<EOL",5);
if (verbose)
	printf("%s\n",Bf);
}


$ GPRE -e blob018.epp
$ CXX FLAG_CXX blob018.cpp
$ LINK FLAG_LINK blob018
$ RUN blob018

>> blob018b.cpp
#include <firebird/Interface.h>
#include <firebird/Message.h>
#include <cstdio>

using namespace Firebird;

static IMaster* master = fb_get_master_interface();

int main()
{
    ThrowStatusWrapper st(master->getStatus());

    auto prov = master->getDispatcher();
    auto utl = master->getUtilInterface();

    try
    {
        auto att = prov->attachDatabase(&st, "WHERE_GDB:sh_blobs_18.gdb", 0, nullptr);
        auto tra = att->startTransaction(&st, 0, nullptr);

        FB_MESSAGE(Output, ThrowStatusWrapper,
            (FB_VARCHAR(31), testName)
            (FB_INTEGER, rowId)
            (FB_BLOB, blob)
        ) output(&st, master);

        auto rs = att->openCursor(&st, tra, 0,
            "select test_name, row_id, b512 from mb1 where test_name = 'blob018' order by row_id",
            3, nullptr, nullptr, output.getMetadata(), nullptr, 0);

        while (rs->fetchNext(&st, output.getData()) == IStatus::RESULT_OK)
        {
            printf("%s %d\n", output->testName.str, output->rowId);

            auto blob = att->openBlob(&st, tra, &output->blob, 0, nullptr);

            char buf[1024];
            unsigned len = 0;

            while (blob->getSegment(&st, sizeof(buf) - 1, buf, &len) == IStatus::RESULT_OK)
                printf("%.*s\n", len, buf);

            blob->close(&st);
        }

        rs->close(&st);
        tra->commit(&st);
        att->detach(&st);

        return 0;
    }
    catch (const FbException& error)
    {
        char s[1024];
        utl->formatStatus(s, sizeof(s), error.getStatus());
        printf("\nUnexpected Error: %s\n", s);
        return 1;
    }
}

$ CXX FLAG_CXX blob018b.cpp
$ LINK FLAG_LINK blob018b
$ RUN blob018b

$DROP WHERE_GDB:sh_blobs_18.gdb
$ DELETE blob018*
