#
#HISTORY:
#
#
#History:
#21-Aug-97: clare: Jeanne found that these are failing
#   gpre compile w/a new error which indicates that prod
#   behavior changed.  compatibility issue for sure.
#   The problem is that 4.0 allowed a Foreign key definition
#   to NOT name the field when it specifies the table for the
#   primary key.  We should be smart enough to figure out the
#   primary key since there is only one.  This program does not
#   specify the primary key and so it fails compilation in beta1,
#   B5.0.  I can work around it and get the test to pass, but
#   it is a bug.
#   Either bug fix or?? (bug 8531)
#

$ GBAK -rep WHERE_FILES:atlas.gbak WHERE_GDB:atlas.gdb
$ RUN ri_views WHERE_GDB:atlas.gdb

>> alt_drop.epp

#include <stdio.h>
#include <cstdlib>
#include <cstring>
#include <ctype.h>

using namespace std;

/* Author: Michael Shulman
   Date:   17-May-93
   Title:  alt_drop.e

   Purpose: RI test suite 
   
   Tests are:
   	Table Constraints:
   		unique		tab_uniq.e
   		primary key	tab_prim.e
   		referential	tab_ref.e     
   		check const	tab_check.e
   	
   	Column Constraints:
   		unique		col_uniq.e
   		primary key	col_prim.e
   		referential	col_ref.e
   		check const	col_check.e
   		not null    col_nnull.e

	DDL Modify Operations:
		alter table add constraint	alt_add.e	
		alter table drop constraint	alt_drop.e  <--------- this test
		drop table					drop_tab.e
		alter field					field_alt.e
		drop field					field_drop.e
		alter index					index_alt.e
		drop index					index_drop.e
		delete trigger				trigger_del.e
		modify trigger				trigger_mod.e


Overview: this test makes sure that new constraints are added correctly. 
It will:
	CREATE TABLE AUTHORS (AUTHOR_ID CHAR(11) 
		CONSTRAINT AUTH_ID_NOT_NULL NOT NULL 
			CONSTRAINT AUTH_ID_KEY PRIMARY KEY,...)
	CREATE TABLE BOOKS (BOOK_ID CHAR(6), BOOK_NAME VARCHAR(80),
		BOOK_AUTH_ID CHAR(11) CONSTRAINT BOOK_AUTH_ID REFERENCES AUTHORS)
	INSERT records into AUTHORS, BOOKS, some which violate constraint
	SELECT from BOOKS, AUTHORS, verify constraint
	ALTER TABLE AUTHORS DROP CONSTRAINT AUTH_ID_KEY [should fail]
	ALTER TABLE AUTHORS DROP CONSTRAINT AUTH_ID_NOT_NULL [fail]
	ALTER TABLE BOOKS DROP CONSTRAINT BOOK_AUTH_ID
	INSERT records into BOOKS, some which used to violate old constraint
	SELECT from BOOKS, AUTHORS, verify constraint is gone


*/

/* Include the SQL Communications Area. */
EXEC SQL
	INCLUDE SQLCA;

/* Set up to catch SQL errors. Note: this will require that 
each routine containing executeable SQL commands has
an error handling section labeled 'err'.*/
EXEC SQL
	WHENEVER SQLERROR GO TO err;
	
/* Forward declarations */
void die_on_error();
int setup();
int verify(int);
int insert_authors();
int insert_books();
int print_books(int);
extern int print_views();
bool alter_drop_key();
bool alter_drop_not_null();
bool alter_drop_references();
int strupper(char*, char*);
int istable(char*);


bool verbose;

int main(int argc, char* argv[])
{

        /*--- check if verbose is requested ------ */
        verbose = false;
        if (--argc > 0){
                if (*argv[1] == 'v' || *argv[1] == 'V')
                        verbose = true;
        }
	if (setup()) 		/* create table */
		exit (1);

	if (insert_authors())
		exit (1);

	if (insert_books())		/* 4 should be kept, 1 rejected for FOREIGN KEY */
		exit (1);

	if (verify(4))
		exit (1);

	if (!alter_drop_key())
		exit (1);

	if (!alter_drop_not_null())
		exit (1);

	if (alter_drop_references())
		exit (1);

	if (insert_books())       /* expect all 9 are kept */
		exit (1);
	
	if (verify(9)) 
		exit (1);

	exit (0);
err:		die_on_error();
}


int setup() {
	const char* cmd;

	if (verbose)
		printf("entered setup\n");

	if (istable("books")) {
		if (verbose) 
			printf("books found... will be dropped\n");
		
		EXEC SQL EXECUTE IMMEDIATE 'DROP TABLE BOOKS';
		EXEC SQL COMMIT;
	}

	if (istable("authors")) {
		if (verbose) 
			printf("authors found... will be dropped\n");
		
		EXEC SQL EXECUTE IMMEDIATE 'DROP TABLE AUTHORS';
		EXEC SQL COMMIT;
	}
	if (verbose)
		printf("about to create authors...\n");

	EXEC SQL
		DECLARE AUTHORS TABLE
			(AUTHOR_ID CHAR(11), AUTHOR_NAME CHAR(12))
	
	cmd = "CREATE TABLE AUTHORS (AUTHOR_ID CHAR(11) \
			CONSTRAINT AUTH_ID_NOT_NULL NOT NULL \
				CONSTRAINT AUTH_ID_KEY PRIMARY KEY,\
			AUTHOR_NAME CHAR(12))";
	EXEC SQL EXECUTE IMMEDIATE :cmd;
	EXEC SQL COMMIT;

	if (verbose)
		printf("authors created\n");

	if (verbose)
		printf("about to create books...\n");

	EXEC SQL
		DECLARE BOOKS TABLE
			(BOOK_ID CHAR(6), BOOK_NAME VARCHAR(80),
			 BOOK_AUTH_ID CHAR(11));

	cmd = "CREATE TABLE BOOKS\
			(BOOK_ID CHAR(6), BOOK_NAME VARCHAR(80),\
			 BOOK_AUTH_ID CHAR(11)\
			 CONSTRAINT BOOK_AUTH_ID REFERENCES AUTHORS)";
	EXEC SQL EXECUTE IMMEDIATE :cmd;
	EXEC SQL COMMIT;

	if (verbose)
		printf("books created successfully.\n");

	return 0;
err:		die_on_error();
}

int verify(int num_recs) 
{  /* make it K&R */ 
	if (verbose)
		printf("Entering verify...\n");

	if (print_books(num_recs))
		exit(1);

	if (print_views())
		exit(1);

	return (0);

err:		die_on_error();
}

int insert_authors() {
	EXEC SQL
		WHENEVER SQLERROR CONTINUE;

	EXEC SQL
		INSERT INTO AUTHORS (AUTHOR_ID, AUTHOR_NAME)
			VALUES ('Joe','Joe Smith');

	EXEC SQL
		INSERT INTO AUTHORS (AUTHOR_ID, AUTHOR_NAME)
			VALUES ('John','John Doe');

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	EXEC SQL
		COMMIT WORK;
	
	if (verbose)
		printf("Inserted 2 records in authors.\n");

	return (0);

err:		die_on_error();
}

int insert_books() {
	EXEC SQL
		WHENEVER SQLERROR CONTINUE;

	EXEC SQL
		INSERT INTO BOOKS (BOOK_ID, BOOK_NAME, BOOK_AUTH_ID)
			VALUES ('BU1032','The Busy Executive''s Database Guide', NULL);

	EXEC SQL
		INSERT INTO BOOKS (BOOK_ID, BOOK_NAME, BOOK_AUTH_ID)
			VALUES ('BU1033',
			'Cooking with Computers: Surreptitious Balance Sheets',
			'John');
	
	EXEC SQL
		INSERT INTO BOOKS (BOOK_ID, BOOK_NAME, BOOK_AUTH_ID)
			VALUES ('BU2075','You Can Combat Computer Stress!',
			'Joe');

	EXEC SQL
		INSERT INTO BOOKS (BOOK_ID, BOOK_NAME, BOOK_AUTH_ID)
			VALUES (NULL,'The Gourmet Microwave','John');

	EXEC SQL   /* should fail! */
		INSERT INTO BOOKS (BOOK_ID, BOOK_NAME, BOOK_AUTH_ID)
			VALUES ('BU3000','The Gourmet Microwave','Fred');

	if (verbose)
		printf("Inserted 5 records, 1 with FOREIGN KEY errors.\n");

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	EXEC SQL
		COMMIT WORK;

	return (0);

err:		die_on_error();
}

int print_books(int num_expected) 
{

	char book_id[12];
	char book_name[81];
	char book_auth_id[12];	
	int i=0;

	EXEC SQL
		DECLARE BOOK_CURSOR CURSOR FOR
		SELECT * FROM BOOKS;

	EXEC SQL
		OPEN BOOK_CURSOR;

	EXEC SQL
		FETCH BOOK_CURSOR INTO :book_id, :book_name, :book_auth_id;

	while (!SQLCODE) {
		printf("%s,%s,%s\n", book_id, book_name, book_auth_id);
		i++;
		
		EXEC SQL
			FETCH BOOK_CURSOR INTO :book_id, :book_name, :book_auth_id;
	}

	EXEC SQL
		CLOSE BOOK_CURSOR;

	EXEC SQL
		COMMIT WORK;

	printf("Number expected: %d, number found: %d.\n", num_expected, i);

	return 0;
err:		die_on_error();
}


bool alter_drop_key() {
	int got_err = false;

	EXEC SQL
		WHENEVER SQLERROR CONTINUE;

	/* should fail */
	EXEC SQL EXECUTE IMMEDIATE 'ALTER TABLE AUTHORS DROP CONSTRAINT AUTH_ID_KEY';

	if (SQLCODE) 
		got_err = true;

	printf ("alter_drop_key expected SQLCODE = -607. Got SQLCODE = %d\n", 
			SQLCODE);

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	return (got_err);
err:		die_on_error();
}

bool alter_drop_not_null() {
	int got_err = false;

	EXEC SQL
		WHENEVER SQLERROR CONTINUE;

	/* should fail */
	EXEC SQL EXECUTE IMMEDIATE 'ALTER TABLE AUTHORS DROP CONSTRAINT AUTH_ID_NOT_NULL';

	if (SQLCODE) 
		got_err = true;

	printf ("alter_drop_not_null expected SQLCODE = -607, got SQLCODE = %d\n", 
			SQLCODE);

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	return (got_err);
err:		die_on_error();
}

bool alter_drop_references() {
	int got_err = false;

	EXEC SQL
		WHENEVER SQLERROR CONTINUE;

	/* should fail */
	EXEC SQL EXECUTE IMMEDIATE 'ALTER TABLE BOOKS DROP CONSTRAINT BOOK_AUTH_ID';
	EXEC SQL COMMIT;

	if (SQLCODE) 
		got_err = true;

	printf ("alter_drop_references got SQLCODE = %d\n", 
			SQLCODE);

	EXEC SQL ROLLBACK;

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	return (got_err);
err:		die_on_error();
}

int strupper(char* targ, char* source) 
{
	int ii;
	
	for (ii=0; *targ++ = toupper(*source++); ii++);

	return ii;
}

int istable(char* tname) 
{

	int exists;
	char *utname;

	if (!tname)
		return 0;
		
	utname = (char *) malloc(strlen(tname)+1);

	strupper(utname, tname);
	
	EXEC SQL
		SELECT COUNT (*)
		INTO :exists
		FROM rdb$relations
		WHERE rdb$relation_name = :utname;

	EXEC SQL
		ROLLBACK WORK;
			
	free(utname);

	return exists;
err:		
	free(utname);
	die_on_error();
}

void die_on_error()

/* Print out error message and die*/
{
	printf ("Data base error, SQLCODE = %d\n", SQLCODE);
	isc_print_status(gds_status);
	EXEC SQL
		ROLLBACK WORK;

err:
	exit (1);
}
$ GPRE alt_drop.epp -d WHERE_GDB:atlas.gdb
$ CXX FLAG_CXX alt_drop.cpp
$ LINK FLAG_LINK alt_drop pr_views 
$ RUN alt_drop
$DROP WHERE_GDB:atlas.gdb
$ DELETE alt_drop*
