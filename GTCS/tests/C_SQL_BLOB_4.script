
$ GBAK -r sh_blobs.gbk WHERE_GDB:sh_blobs_4.gdb
>> blob004.epp
/**********************************************************************
 Purpose:               Test SQL blob support in InterBase 4.0
 Description:           INSERT BLOB INTO TABLE MAXIMUM_SEGMENT
 Author:                Sam Hakim, June 7, 93
 **********************************************************************/
#include <stdio.h>
#include <cstdlib>
#include <cstring>

using namespace std;

DATABASE DB = "WHERE_GDB:sh_blobs_4.gdb";
EXEC SQL	INCLUDE SQLCA;
EXEC SQL
        WHENEVER SQLERROR GO TO ERR_LBL;

BASED_ON MB1.COMMENT        Comment;
BASED_ON MB1.ROW_ID         Row_Id;
BASED_ON MB1.B256           BlobId;
BASED_ON MB1.TEST_NAME      Test_Name;

char                        TempBuf[4];
short                       i,j,k,l;

struct Buf{
    char            Buffer[256];
	unsigned short	BufferLen;
};
struct Buf M;

char Test[]="DECLARE BCW CURSOR FOR INSERT BLOB B256 INTO MB1 MAXIMUM_SEGMENT 256";

void Underline(int);
void Append(char s[], char t[]);
void CreateLine(char Bf[]);

int main(int argc,char* argv[])
{
    int Count;
    bool verbose;

    verbose = false;
    if (--argc > 0){
        if (*argv[1] == 'v' || *argv[1] == 'V')
            verbose = true;
        }

    READY;              /* Bug 4549 will be fixed in verion G */

    Count = 0;

    printf ("Test:\n %s\n",Test);
    Underline(80);
    strcpy(Test_Name,"blob004");

    EXEC SQL
    DECLARE BCW CURSOR FOR
    INSERT BLOB B256 INTO MB1 MAXIMUM_SEGMENT 256;

    for (j = 8; j < 10; j++){
    START_TRANSACTION;  /* should be deleted in version G*/
        EXEC SQL
        OPEN BCW INTO :BlobId;      /* This will change in G to INTO */

        for (i=1; i<100; i++){

            sprintf (M.Buffer,"Line: %2d ",i);
            CreateLine(M.Buffer);
            M.BufferLen = strlen(M.Buffer);
            EXEC SQL
                INSERT CURSOR BCW VALUES (:M.Buffer:M.BufferLen);
        }
    EXEC SQL
        CLOSE BCW;
    EXEC SQL
        INSERT INTO MB1 (TEST_NAME,ROW_ID,B256) VALUES (:Test_Name,:j,:BlobId);
    EXEC SQL COMMIT;
    }

FINISH;

return 0;

ERR_LBL:
	printf("Database error, SQLCODE = %d\n",SQLCODE);
        isc_print_status(gds_status);

	EXEC SQL
		ROLLBACK RELEASE;
	FINISH;

	return 1;
}
/************************************************************
 * Draw and underline
 ************************************************************/
void Underline(int i)
{
int j;

for (j=0;j<i;j++)
	printf("-");
printf("\n");

}
/************************************************************
 * Append t to s
 ************************************************************/
void Append(char s[], char t[])
{
    int i,j;
    i = j = 0;
    while (s[i] != '\0')
        i++;
    while ((s[i++] = t[j++]) != '\0')   /* copy t */
        ;
}
/************************************************************
 * Create a new line for the blob content.
 ************************************************************/
void CreateLine(char Bf[])
{
char            TempBuf[4];
short		i;
     TempBuf[3]=0;

     for (i = 1; i < 21; i++){
	sprintf (TempBuf,"%2d,",i);
        Append(Bf,TempBuf);
	}
}

$ GPRE -e blob004.epp
$ CXX FLAG_CXX blob004.cpp
$ LINK FLAG_LINK blob004
$ RUN blob004

>> blob004b.cpp
#include <firebird/Interface.h>
#include <firebird/Message.h>
#include <cstdio>

using namespace Firebird;

static IMaster* master = fb_get_master_interface();

int main()
{
    ThrowStatusWrapper st(master->getStatus());

    auto prov = master->getDispatcher();
    auto utl = master->getUtilInterface();

    try
    {
        auto att = prov->attachDatabase(&st, "WHERE_GDB:sh_blobs_4.gdb", 0, nullptr);
        auto tra = att->startTransaction(&st, 0, nullptr);

        FB_MESSAGE(Output, ThrowStatusWrapper,
            (FB_VARCHAR(31), testName)
            (FB_INTEGER, rowId)
            (FB_BLOB, blob)
        ) output(&st, master);

        auto rs = att->openCursor(&st, tra, 0,
            "select test_name, row_id, b256 from mb1 where test_name = 'blob004' order by row_id",
            3, nullptr, nullptr, output.getMetadata(), nullptr, 0);

        while (rs->fetchNext(&st, output.getData()) == IStatus::RESULT_OK)
        {
            printf("%s %d\n", output->testName.str, output->rowId);

            auto blob = att->openBlob(&st, tra, &output->blob, 0, nullptr);

            char buf[256];
            unsigned len = 0;

            while (blob->getSegment(&st, sizeof(buf) - 1, buf, &len) == IStatus::RESULT_OK)
                printf("%.*s\n", len, buf);

            blob->close(&st);
        }

        rs->close(&st);
        tra->commit(&st);
        att->detach(&st);

        return 0;
    }
    catch (const FbException& error)
    {
        char s[1024];
        utl->formatStatus(s, sizeof(s), error.getStatus());
        printf("\nUnexpected Error: %s\n", s);
        return 1;
    }
}

$ CXX FLAG_CXX blob004b.cpp
$ LINK FLAG_LINK blob004b
$ RUN blob004b

$DROP WHERE_GDB:sh_blobs_4.gdb
$ DELETE blob004*
