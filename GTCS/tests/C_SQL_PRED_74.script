
$ GBAK -r WHERE_FILES:sh_test.gbk WHERE_GDB:sh_test.gdb
$ CREATE sin026.e
/**********************************************************************
 Purpose:		Test predicates support in InterBase SQL 4.0
 
 Syntax:                [NOT] SINGULAR <subquery>

 Description:           SINGULAR - Subquery returning duplicates.
			Row set should be empty.

                        SELECT V2.DEPTNO, V2.DEPARTMENT, V2.MGRNO, V2.BUDGET
                        FROM DEPT_BUDGET V2
                        WHERE SINGULAR
                        (SELECT * FROM FULLEMP V3, EMPSAL V4, SALES T1
                        WHERE V2.DEPARTMENT = V3.DEPARTMENT AND
                        V3.EMPNO = V4.EMPNO AND V4.EMPNO = T1.SALES_REP
                        AND T1.TOTAL_VALUE >
                        (SELECT MIN(T2.TOTAL_VALUE) FROM SALES T2 WHERE T2.SALES_REP = 100))
                        ORDER BY V2.DEPTNO;

Note: The above query should be equivalent to the following:

                        SELECT V2.DEPTNO, V2.DEPARTMENT, V2.MGRNO, V2.BUDGET
                        FROM DEPT_BUDGET V2
                        WHERE 1 = 
                        (SELECT count(*) FROM FULLEMP V3, EMPSAL V4, SALES T1
                        WHERE V2.DEPARTMENT = V3.DEPARTMENT AND
                        V3.EMPNO = V4.EMPNO AND V4.EMPNO = T1.SALES_REP
                        AND T1.TOTAL_VALUE >
                        (SELECT MIN(T2.TOTAL_VALUE) FROM SALES T2 WHERE T2.SALES_REP = 100))
                        ORDER BY V2.DEPTNO;

Views:                  DEPT_BUDGET,FULLEMP, EMPSAL
Tables:                 SALES

 Author:                Sam Hakim, Feb 19, 1993
 ***********************************************************************
*/

#include <stdio.h>

DATABASE DB = 'WHERE_GDB:sh_test.gdb';
EXEC SQL	INCLUDE SQLCA;

EXEC SQL
        WHENEVER SQLERROR GO TO ERR;
EXEC SQL
        WHENEVER NOT FOUND GO TO NOMORE;

BASED_ON DEPARTMENTS.DEPTNO             DeptNo;
BASED_ON DEPARTMENTS.DEPARTMENT         Department;
BASED_ON DEPARTMENTS.MGRNO              MgrNo;
float                                   BudgetSum;

void Underline();
void pad();


char Test[]="\
SELECT V2.DEPTNO, V2.DEPARTMENT, V2.MGRNO, V2.BUDGET \
FROM DEPT_BUDGET V2 \
WHERE SINGULAR \
(SELECT * FROM FULLEMP V3, EMPSAL V4, SALES T1 \
WHERE V2.DEPARTMENT = V3.DEPARTMENT AND \
V3.EMPNO = V4.EMPNO AND V4.EMPNO = T1.SALES_REP \
AND T1.TOTAL_VALUE > \
(SELECT MIN(T2.TOTAL_VALUE) FROM SALES T2 WHERE T2.SALES_REP = 100)) \
ORDER BY V2.DEPTNO" ;

char Verif[]="\
SELECT V2.DEPTNO, V2.DEPARTMENT, V2.MGRNO, V2.BUDGET \
FROM DEPT_BUDGET V2 \
WHERE 1 =  \
(SELECT count(*) FROM FULLEMP V3, EMPSAL V4, SALES T1 \
WHERE V2.DEPARTMENT = V3.DEPARTMENT AND \
V3.EMPNO = V4.EMPNO AND V4.EMPNO = T1.SALES_REP \
AND T1.TOTAL_VALUE > \
(SELECT MIN(T2.TOTAL_VALUE) FROM SALES T2 WHERE T2.SALES_REP = 100)) \
ORDER BY V2.DEPTNO" ;

void Underline();
main(argc, argv)
int argc;
char *argv[];

{

        int Count = 0;
	int Count2 = 0;
        printf("Test:\n %s\n",Test);
        Underline(80);
	EXEC SQL
		DECLARE CR CURSOR FOR
                        SELECT V2.DEPTNO, V2.DEPARTMENT, V2.MGRNO, V2.BUDGET
                        FROM DEPT_BUDGET V2
                        WHERE SINGULAR
                        (SELECT * FROM FULLEMP V3, EMPSAL V4, SALES T1
                        WHERE V2.DEPARTMENT = V3.DEPARTMENT AND
                        V3.EMPNO = V4.EMPNO AND V4.EMPNO = T1.SALES_REP
                        AND T1.TOTAL_VALUE >
                        (SELECT MIN(T2.TOTAL_VALUE) FROM SALES T2 
			WHERE T2.SALES_REP = 100))
                        ORDER BY V2.DEPTNO;

        EXEC SQL
		OPEN CR;
		
	EXEC SQL
                FETCH CR INTO :DeptNo,:Department,:MgrNo,:BudgetSum;

        while (SQLCODE == 0){
		Count++;
                pad(Department, sizeof(Department));

                printf("%s\t",DeptNo);
                printf("%s\t",Department);
                printf("%d\t",MgrNo);
                printf("%10.2\n",(double)(BudgetSum/100));

		Underline(50);	

                EXEC SQL
                        FETCH CR INTO :DeptNo,:Department,:MgrNo,:BudgetSum;
        }
	
NOMORE:

	EXEC SQL
		CLOSE CR;

EXEC SQL
	WHENEVER SQLERROR CONTINUE;   /* Trun-off pervious whenever setting */

EXEC SQL
	WHENEVER NOT FOUND GO TO NOMORE2;

	printf("\n\n* Total Records Listed >>> %d\n\n",Count);
	
	Count2 = 0;

        printf("Verification: %s\n ",Verif);
        Underline(80);
	EXEC SQL
		DECLARE CRV CURSOR FOR
                        SELECT V2.DEPTNO, V2.DEPARTMENT, V2.MGRNO, V2.BUDGET
                        FROM DEPT_BUDGET V2
                        WHERE 1 = 
                        (SELECT count(*) FROM FULLEMP V3, EMPSAL V4, SALES T1
                        WHERE V2.DEPARTMENT = V3.DEPARTMENT AND
                        V3.EMPNO = V4.EMPNO AND V4.EMPNO = T1.SALES_REP
                        AND T1.TOTAL_VALUE >
                        (SELECT MIN(T2.TOTAL_VALUE) FROM SALES T2 
			WHERE T2.SALES_REP = 100))
                        ORDER BY V2.DEPTNO;

        EXEC SQL
		OPEN CRV;
		
	EXEC SQL
                FETCH CRV INTO :DeptNo,:Department,:MgrNo,:BudgetSum;

        while (SQLCODE == 0){
		Count2++;
                pad(Department, sizeof(Department));

                printf("%s\t",DeptNo);
                printf("%s\t",Department);
                printf("%d\t",MgrNo);
                printf("%10.2\n",(double)(BudgetSum/100));

		Underline(50);	

                EXEC SQL
                        FETCH CRV INTO :DeptNo,:Department,:MgrNo,:BudgetSum;

        }
NOMORE2:
	EXEC SQL
		CLOSE CRV;


	printf ("\n\n* Total Records Listed should be >>> %d\n",Count2);

	EXEC SQL
		COMMIT RELEASE;
	FINISH;


exit(0);

ERR:    EXEC SQL
                CLOSE CR;

	printf("Database error, SQLCODE = %d\n",SQLCODE);
        isc_print_status(gds__status);

	EXEC SQL
		ROLLBACK RELEASE;
	FINISH;

	exit(1);
}

void Underline(i)
int i;
{
int j;

for (j=0;j<i;j++)
	printf("-");
printf("\n");

}

/***************************************************************
 * pad the character string with blanks
 ***************************************************************
*/
void pad(string,l)
char *string;
int l;
{

char *s;
int i;

i = 1;
s = string;

while (*s){
	s++;
	i++;
}
for (;i<l;s++,i++)
	*s=' ';	
*s='\0';
}

$ GPRE -e sin026.e
$ CC FLAG_CC sin026.c
$ LINK FLAG_LINK sin026 
$ RUN sin026
$ CREATE sin026.qli
ready WHERE_GDB:sh_test.gdb;
set semicolon;

select v2.deptno, v2.department, v2.mgrno, v2.budget
from dept_budget v2
where singular
(select * from fullemp v3, empsal v4, sales t1 
where v2.department = v3.department and
v3.empno = v4.empno and v4.empno = t1.sales_rep 
and t1.total_value >
(select min(t2.total_value) from sales t2 where t2.sales_rep = 100))
order by v2.deptno;

select v2.deptno, v2.department, v2.mgrno, v2.budget
from dept_budget v2
where 1 = 
(select count(*) from fullemp v3, empsal v4, sales t1 
where v2.department = v3.department and
v3.empno = v4.empno and v4.empno = t1.sales_rep 
and t1.total_value >
(select min(t2.total_value) from sales t2 where t2.sales_rep = 100))
order by v2.deptno;

finish;
quit;
$ QLI -n -a sin026.qli
$ CREATE sin026.sql

select v2.deptno, v2.department, v2.mgrno, v2.budget
from dept_budget v2
where singular
(select * from fullemp v3, empsal v4, sales t1 
where v2.department = v3.department and
v3.empno = v4.empno and v4.empno = t1.sales_rep
and t1.total_value >
(select min(t2.total_value) from sales t2 where t2.sales_rep = 100))
order by v2.deptno;

select v2.deptno, v2.department, v2.mgrno, v2.budget
from dept_budget v2
where 1 = 
(select count(*) from fullemp v3, empsal v4, sales t1 
where v2.department = v3.department and
v3.empno = v4.empno and v4.empno = t1.sales_rep
and t1.total_value >
(select min(t2.total_value) from sales t2 where t2.sales_rep = 100))
order by v2.deptno;

quit;
$ ISQL -m WHERE_GDB:sh_test.gdb -i sin026.sql
$DROP WHERE_GDB:sh_test.gdb
$ DELETE sin026*
