create database "WHERE_GDB:curfield.fdb";

set term !;

---


-- Test assignment with ':' in the l-value
execute block returns (o integer)
as
  declare v1 integer;
begin
  v1 = 1;

  o = v1;
  suspend;

  o = :v1;
  suspend;

  :v1 = 2;

  :o = :v1;
  suspend;
end!

           O 
============ 
           1 
           1 
           2 



---


create table t1 (n1 integer, n2 integer, n3 integer)!

create trigger t1_1 before insert on t1
as
begin
  new.n2 = new.n1;
end!

-- Test assignment with ':' in the l-value
create trigger t1_2 before insert on t1
as
begin
  :new.n3 = :new.n1;
end!

insert into t1 (n1) values (11)!
select * from t1!

          N1           N2           N3 
============ ============ ============ 
          11           11           11 



---


create table t2 (n1 integer)!

insert into t2 (n1) values (1)!
insert into t2 (n1) values (2)!
insert into t2 (n1) values (3)!

execute block
as
begin
  for select *
        from t2
        as cursor tables
  do
  begin
    update t2 set n1 = n1 * 10 where current of tables;
  end
end!

select * from t2 order by n1!

          N1 
============ 
          10 
          20 
          30 


execute block
as
  declare tables cursor for (
    select *
      from t2
  );
begin
  open tables;
  
  while (1 = 1)
  do
  begin
    fetch tables;
    if (row_count = 0) then
        leave;

    update t2 set n1 = n1 * 10 where current of tables;
  end

  close tables;  
end!

select * from t2 order by n1!

          N1 
============ 
         100 
         200 
         300 



---


execute block returns (out_id integer, out_name varchar(31))
as
begin
  for select rdb$relation_id as id, rdb$relation_name as name
        from rdb$relations
        where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
        order by rdb$relation_name
        as cursor tables
  do
  begin
    out_id = tables.id;       -- without ':'
    out_name = :tables.name;  -- with ':'
    suspend;
  end
end!

      OUT_ID OUT_NAME                        
============ =============================== 
           1 RDB$DATABASE                    
           2 RDB$FIELDS                      
           0 RDB$PAGES                       



---


execute block returns (out_id integer, out_name varchar(31))
as
begin
  for select rdb$relation_id as id, rdb$relation_name as name
        from rdb$relations
        where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
        order by rdb$relation_name
        into out_id, :out_name
        as cursor tables
  do
  begin
    suspend;
  end
end!

      OUT_ID OUT_NAME                        
============ =============================== 
           1 RDB$DATABASE                    
           2 RDB$FIELDS                      
           0 RDB$PAGES                       



---


execute block returns (out_id integer, out_name varchar(31))
as
begin
  for select rdb$relation_id as id, rdb$relation_name as name
        from rdb$relations
        where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
        order by rdb$relation_name
        as cursor tables1
  do
  begin
    for select rdb$relation_id as id, rdb$relation_name as name
          from rdb$relations
          where rdb$relation_id = :tables1.id
          into out_id, :out_name
    do
    begin
      suspend;
    end
  end
end!

      OUT_ID OUT_NAME                        
============ =============================== 
           1 RDB$DATABASE                    
           2 RDB$FIELDS                      
           0 RDB$PAGES                       



---


execute block returns (out_id integer, out_name varchar(31))
as
  declare tables cursor for (
    select rdb$relation_id as id, rdb$relation_name as name
      from rdb$relations
      where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
      order by rdb$relation_name
  );
begin
  open tables;
  
  while (1 = 1)
  do
  begin
    fetch tables;
    if (row_count = 0) then
        leave;

    out_id = tables.id; 
    out_name = :tables.name;
    suspend; 
  end

  close tables;  

  open tables;
  
  while (1 = 1)
  do
  begin
    fetch tables into out_id, :out_name;
    if (row_count = 0) then
        leave;

    suspend; 
  end

  close tables;  
end!

      OUT_ID OUT_NAME                        
============ =============================== 
           1 RDB$DATABASE                    
           2 RDB$FIELDS                      
           0 RDB$PAGES                       
           1 RDB$DATABASE                    
           2 RDB$FIELDS                      
           0 RDB$PAGES                       



---


execute block returns (out_id integer, out_name varchar(31))
as
  declare tables1 cursor for (
    select rdb$relation_id as id, rdb$relation_name as name
      from rdb$relations
      where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
      order by rdb$relation_name
  );

  declare tables2 cursor for (
    select rdb$relation_id as id, rdb$relation_name as name
      from rdb$relations
      where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
      and rdb$relation_id = :tables1.id
      order by rdb$relation_name
  );
begin
  open tables1;

  open tables2;
  fetch tables2;
end!

      OUT_ID OUT_NAME                        
============ =============================== 
Statement failed, SQLSTATE = HY109
Cursor TABLES1 is not positioned in a valid record
-At block line: 21, col: 3
After line 203 in file fb_sql_cur_field.sql


---


-- Test view

create view v1 as
  select *
    from (
      select 1 n1
        from rdb$database
    ) a
    full join (
      select 2 n2
        from rdb$database
    ) b
      on 1 = 0
    order by a.n1!

execute block returns (n1 integer, n2 integer)
as
begin
  for select *
        from v1
        as cursor tables
  do
  begin
    n1 = tables.n1;
    n2 = tables.n2;
    suspend;
  end
end!

          N1           N2 
============ ============ 
      <null>            2 
           1       <null> 



---


-- Test access to a cursor out of scope
execute block returns (out_id integer, out_name varchar(31))
as
begin
  for select rdb$relation_id as id, rdb$relation_name as name
        from rdb$relations
        where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
        order by rdb$relation_name
        as cursor tables
  do
  begin
  end

  out_id = tables.id;
  out_name = :tables.name;
end!
Statement failed, SQLSTATE = 42S22
Dynamic SQL Error
-SQL error code = -206
-Column unknown
-TABLES.ID
-At line 13, column 12
At line 276 in file fb_sql_cur_field.sql


---


-- Test write to a field cursor - 1
execute block returns (out_id integer, out_name varchar(31))
as
  declare tables cursor for (
    select rdb$relation_id as id, rdb$relation_name as name
      from rdb$relations
      where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
      order by rdb$relation_name
  );
begin
  tables.id = 1;
end!
Statement failed, SQLSTATE = 42000
attempted update of read-only column TABLES.ID
After line 284 in file fb_sql_cur_field.sql


---


-- Test write to a field cursor - 2
execute block returns (out_id integer, out_name varchar(31))
as
begin
  for select rdb$relation_id as id, rdb$relation_name as name
        from rdb$relations
        where rdb$relation_name in ('RDB$PAGES', 'RDB$DATABASE', 'RDB$FIELDS')
        order by rdb$relation_name
        as cursor tables
  do
  begin
    tables.id = 1;
  end
end!
Statement failed, SQLSTATE = 42000
attempted update of read-only column TABLES.ID
After line 301 in file fb_sql_cur_field.sql


---


-- Test read a closed cursor
execute block returns (out_id integer, out_name varchar(31))
as
  declare tables cursor for (
    select rdb$relation_id as id
      from rdb$database
  );
begin
  out_id = tables.id; 
end!

      OUT_ID OUT_NAME                        
============ =============================== 
Statement failed, SQLSTATE = 24000
Cursor is not open
-At block line: 8, col: 3
After line 320 in file fb_sql_cur_field.sql


---


-- Test read a derived expression of a closed cursor
execute block returns (out_id integer)
as
  declare tables cursor for (
    select 1 as id
      from rdb$database
  );
begin
  out_id = tables.id; 
end!

      OUT_ID 
============ 
Statement failed, SQLSTATE = 24000
Cursor is not open
-At block line: 8, col: 3
After line 335 in file fb_sql_cur_field.sql


---


-- Test read a opened but not fetched cursor
execute block returns (out_id integer, out_name varchar(31))
as
  declare tables cursor for (
    select rdb$relation_id as id
      from rdb$database
  );
begin
  open tables;
  out_id = tables.id; 
end!

      OUT_ID OUT_NAME                        
============ =============================== 
Statement failed, SQLSTATE = HY109
Cursor TABLES is not positioned in a valid record
-At block line: 9, col: 3
After line 350 in file fb_sql_cur_field.sql


---


-- Test read a cursor in the eof state
execute block returns (out_id integer, out_name varchar(31))
as
  declare tables cursor for (
    select rdb$relation_id as id
      from rdb$database
  );
begin
  open tables;
  fetch tables;
  fetch tables;
  out_id = tables.id; 
end!

      OUT_ID OUT_NAME                        
============ =============================== 
Statement failed, SQLSTATE = HY109
Cursor TABLES is not positioned in a valid record
-At block line: 11, col: 3
After line 366 in file fb_sql_cur_field.sql


---


-- Test duplicate cursor - 1
execute block returns (out_id integer, out_name varchar(31))
as
  declare tables cursor for (
    select rdb$relation_id as id
      from rdb$database
  );

  declare tables cursor for (
    select rdb$relation_id as id
      from rdb$database
  );
begin
end!
Statement failed, SQLSTATE = 42000
Dynamic SQL Error
-SQL error code = -637
-duplicate specification of TABLES - not supported
After line 384 in file fb_sql_cur_field.sql


---


-- Test duplicate cursor - 2
execute block returns (out_id integer, out_name varchar(31))
as
  declare tables cursor for (
    select rdb$relation_id as id
      from rdb$database
  );
begin
  for select rdb$relation_id as id
        from rdb$database
        as cursor tables
  do
  begin
  end
end!
Statement failed, SQLSTATE = 34000
Dynamic SQL Error
-SQL error code = -502
-Invalid cursor declaration
-Cursor TABLES already exists in the current context
After line 403 in file fb_sql_cur_field.sql


---


-- Test duplicate cursor - 3
execute block returns (out_id integer, out_name varchar(31))
as
begin
  for select rdb$relation_id as id
        from rdb$database
        as cursor tables
  do
  begin
    for select rdb$relation_id as id
          from rdb$database
          as cursor tables
    do
    begin
    end
  end
end!
Statement failed, SQLSTATE = 34000
Dynamic SQL Error
-SQL error code = -502
-Invalid cursor declaration
-Cursor TABLES already exists in the current context
After line 423 in file fb_sql_cur_field.sql


---

drop database!

exit!
