#
#HISTORY:
#
#
#History:
#8/25/97:  failed w/compile error. logging new bug since syntax
#	  shows we should be able to do the DDL in this test.
#          see comments in C_DSQL_RI_ALT_DROP.
#

$ GBAK -rep WHERE_FILES:atlas.gbak WHERE_GDB:atlas.gdb
$ RUN ri_views WHERE_GDB:atlas.gdb
>> drop_tab.epp
#include <stdio.h>
#include <cstdlib>
#include <cstring>
#include <ctype.h>

using namespace std;

/* Author: Allen Zhao
   Date:   Oct-8-93
   Title:  drop_tab.e

   Dependencies: Need to run C_DSQL_RI_INIT first.

   Purpose: RI test suite 
   
   Tests are:
   	Table Constraints:
   		unique		tab_uniq.e
   		primary key	tab_prim.e
   		referential	tab_ref.e     
   		check const	tab_check.e
   	
   	Column Constraints:
   		unique		col_uniq.e
   		primary key	col_prim.e
   		referential	col_ref.e
   		check const	col_check.e
   		not null    col_nnull.e

	DDL Modify Operations:
		alter table add constraint	alt_add.e	
		alter table drop constraint	alt_drop.e   
		drop table			drop_tab.e  <------ this test
		alter field			field_alt.e
		drop field			field_drop.e 
		alter index			index_alt.e
		drop index			index_drop.e
		delete trigger			trigger_del.e
		modify trigger			trigger_mod.e


Overview: this test makes sure that new constraints are added correctly. 
It will:
	CREATE TABLE AUTHORS (AUTHOR_ID CHAR(11) 
			CONSTRAINT AUTHOR_ID_NOT_NULL NOT NULL
			CONSTRAINT AUTHOR_ID_KEY PRIMARY KEY,..)

	CREATE TABLE BOOKS (BOOK_ID CHAR(6), BOOK_NAME VARCHAR(80),
			BOOK_AUTH_ID CHAR(11) REFERENCES AUTHORS)

	Print views to verify initial constraints
	DROP TABLE AUTOHORS                     [should fail; field referenced]
	ALTER TABLE BOOKS DROP BOOK_AUTH_ID	[should succeed]
	Print views to verify Referential constraint is indeed dropped
	DROP TABLE AUTHORS			[should succeed]
	Print views to verify table AUTHORS is indeed dropped

*/

/* Include the SQL Communications Area. */
EXEC SQL
	INCLUDE SQLCA;

/* Set up to catch SQL errors. Note: this will require that 
each routine containing executeable SQL commands has
an error handling section labeled 'err'.*/
EXEC SQL
	WHENEVER SQLERROR GO TO err;
	
/* Forward declarations */
extern int print_views();
void die_on_error();
int setup();
bool alter_drop_referring_field();
bool drop_table(int);
int strupper(char*, char*);
int istable(char*);


bool verbose;
enum constraint {none, referred};

void main(int argc, char* argv[])
{
        /*--- check if verbose is requested ------ */
        verbose = false;
        if (--argc > 0){
                if (*argv[1] == 'v' || *argv[1] == 'V')
                        verbose = true;
        }
	if (setup()) 		/* create table */
		exit (1);

	printf("----Views after initial table setup:\n");

	print_views();

	if (!drop_table(referred))       /* drop table with constraints */
		exit (1);

	if (alter_drop_referring_field())
		exit (1);

	printf("----Views after referring field is dropped:\n");

	print_views();

	if (drop_table(none)) 	     /* drop table no longer referenced */
		exit (1);
	
	printf("----Views after author table is dropped:\n");

	print_views();

	exit (0);
err:		die_on_error();
}


int setup() {

	const char* cmd;

	if (verbose)
		printf("entered setup\n");

	if (istable("books")) {
		if (verbose) 
			printf("books found... will be dropped\n");
		
		EXEC SQL EXECUTE IMMEDIATE 'DROP TABLE BOOKS';
		EXEC SQL COMMIT;
	}

	if (istable("authors")) {
		if (verbose) 
			printf("authors found... will be dropped\n");
		
		EXEC SQL EXECUTE IMMEDIATE 'DROP TABLE AUTHORS';
		EXEC SQL COMMIT;
	}
	if (verbose)
		printf("about to create authors...\n");

	EXEC SQL
		DECLARE AUTHORS TABLE
			(AUTHOR_ID CHAR(11), AUTHOR_NAME CHAR(12))
	
	cmd = "CREATE TABLE AUTHORS (AUTHOR_ID CHAR(11) \
			CONSTRAINT AUTH_ID_NOT_NULL NOT NULL \
				CONSTRAINT AUTH_ID_KEY PRIMARY KEY, \
			AUTHOR_NAME CHAR(12))";
	EXEC SQL EXECUTE IMMEDIATE :cmd;
	EXEC SQL COMMIT;

	if (verbose)
		printf("authors created\n");


	if (verbose)
		printf("about to create books...\n");

	EXEC SQL
		DECLARE BOOKS TABLE
			(BOOK_ID CHAR(6), BOOK_NAME VARCHAR(80),
			 BOOK_AUTH_ID CHAR(11));

	cmd = "CREATE TABLE BOOKS \
			(BOOK_ID CHAR(6), BOOK_NAME VARCHAR(80), \
			 BOOK_AUTH_ID CHAR(11) \
			 CONSTRAINT BOOK_AUTH_ID REFERENCES AUTHORS)";
	EXEC SQL EXECUTE IMMEDIATE :cmd;
	EXEC SQL COMMIT;


	if (verbose)
		printf("books created successfully.\n");

	return 0;
err:		die_on_error();
}


bool alter_drop_referring_field() {
	int got_err = false;

	EXEC SQL
		WHENEVER SQLERROR CONTINUE;
		
	EXEC SQL EXECUTE IMMEDIATE 'ALTER TABLE BOOKS DROP BOOK_AUTH_ID';

	if (SQLCODE) 
		got_err = true;

	printf ("alter_drop_referring_field expected SQLCODE = 0. Got SQLCODE = %d\n", 
			SQLCODE);

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	EXEC SQL COMMIT;

	return (got_err);
err:		die_on_error();
}


bool drop_table(int constraint)
{
	int got_err = false;

	
	EXEC SQL
		WHENEVER SQLERROR CONTINUE;

	/* should succeed if no constraint, else should fail  */
	EXEC SQL EXECUTE IMMEDIATE 'DROP TABLE AUTHORS';

	if (SQLCODE) 
		got_err = true;

	if (constraint == referred)    /* should fail */ 
		printf("drop table expected SQLCODE = -607 ");
	else				/* no constraint */
		printf ("drop table expected SQLCODE = 0. "); 

	printf("Got SQLCODE = %d\n", SQLCODE);

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	EXEC SQL COMMIT;

	return (got_err);
err:		die_on_error();
}



int strupper(char* targ, char* source) 
{
	int ii;
	
	for (ii=0; *targ++ = toupper(*source++); ii++);

	return ii;
}

int istable(char* tname) 
{

	int exists;
	char *utname;

	if (!tname)
		return 0;
		
	utname = (char *) malloc(strlen(tname)+1);

	strupper(utname, tname);
	
	EXEC SQL
		SELECT COUNT (*)
		INTO :exists
		FROM rdb$relations
		WHERE rdb$relation_name = :utname;

	EXEC SQL
		ROLLBACK WORK;
			
	free(utname);

	return exists;
err:		
	free(utname);
	die_on_error();
}

void die_on_error()

/* Print out error message and die*/
{
	printf ("Data base error, SQLCODE = %d\n", SQLCODE);
	isc_print_status(gds_status);
	EXEC SQL
		ROLLBACK WORK;

err:
	exit (1);
}

$ GPRE drop_tab.epp -d WHERE_GDB:atlas.gdb
$ CXX FLAG_CXX drop_tab.cpp
$ LINK FLAG_LINK drop_tab pr_views 
$ RUN drop_tab
$DROP WHERE_GDB:atlas.gdb
$ DELETE drop_tab*
