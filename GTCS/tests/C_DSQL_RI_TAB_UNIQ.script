#
#HISTORY:
#

$ GBAK -rep WHERE_FILES:atlas.gbak WHERE_GDB:atlas.gdb
$ RUN ri_views WHERE_GDB:atlas.gdb
>> tab_uniq.epp

#include <stdio.h>
#include <cstdlib>
#include <cstring>
#include <ctype.h>

using namespace std;

/* Author: Michael Shulman
   Date:   1-Feb-93
   Title:  tab_uniq.e

   Dependencies: Need to run C_DSQL_RI_INIT first.

   Purpose: RI test suite
   Each test will setup() and verify()
   setup() - create table with feature
   verify() - verify feature by checking views and try to break feature

   Tests are:
   	Table Constraints:
   		unique		tab_uniq.e   <---- this test
   		primary key	tab_prim.e
   		referential	tab_ref.e
   		check const	tab_check.e

   	Column Constraints:
   		unique		col_uniq.e
   		primary key	col_prim.e
   		referential	col_ref.e
   		check const	col_check.e

*/

/* Include the SQL Communications Area. */
EXEC SQL
	INCLUDE SQLCA
/* Set up to catch SQL errors. Note: this will require that
each routine containing executeable SQL commands has
an error handling section labeled 'err'.*/
EXEC SQL
	WHENEVER SQLERROR GO TO err;
/* Forward declarations */
void die_on_error();
int setup();
int verify();
int insert_books();
int print_books(int);
extern int print_views();
int strupper(char*, char*);
int istable(char*);

bool verbose;

int main(int argc, char* argv[])
{

        /*--- check if verbose is requested ------ */
        verbose = false;
        if (--argc > 0){
                if (*argv[1] == 'v' || *argv[1] == 'V')
                        verbose = true;
        }
	if (setup())
		exit (1);

	if (verify())
		exit (1);

	/* if !cleanup()
		exit (1); */

	exit (0);
err:		die_on_error();
}


int setup() {

	char booksTable[] =
		"CREATE TABLE BOOKS	\
			(BOOK_ID CHAR(6) NOT NULL, BOOK_NAME VARCHAR(80),	\
			 BOOK_AUTH_ID CHAR(11), UNIQUE (BOOK_ID))";
	char authorsTable[] =
		"CREATE TABLE AUTHORS (AUTH_ID CHAR(11) NOT NULL, AUTH_NAME CHAR(50),	\
					 /* 1234567890123456789012345678901 - 31 char */	\
			 CONSTRAINT AUTH_NAME_UNIQ_6789012345678901 UNIQUE (AUTH_ID))";

	if (verbose)
		printf("entered setup\n");

	if (istable("books")) {
		if (verbose)
			printf("books found... will be dropped\n");
		EXEC SQL EXECUTE IMMEDIATE 'DROP TABLE BOOKS';
		EXEC SQL COMMIT;
	}

	if (verbose)
		printf("about to create books...\n");

	EXEC SQL
		DECLARE BOOKS TABLE (BOOK_ID CHAR(6), BOOK_NAME VARCHAR(80),
			 BOOK_AUTH_ID CHAR(11));

	EXEC SQL EXECUTE IMMEDIATE :booksTable;
	EXEC SQL COMMIT;

	if (verbose)
		printf("books created successfully.\n");


	if (istable("authors")) {
		if (verbose)
			printf("authors found... will be dropped\n");
		EXEC SQL EXECUTE IMMEDIATE 'DROP TABLE AUTHORS';
		EXEC SQL COMMIT;
	}

	if (verbose)
		printf("about to create authors...\n");

	EXEC SQL EXECUTE IMMEDIATE :authorsTable;
	EXEC SQL COMMIT;

	if (verbose)
		printf("authors created successfully.\n");

	return 0;
err:		die_on_error();
}



int verify() {
	/* insert some records into the authors and the books tables, including
	   some that violate the constraint. Commit and make sure that the good
	   ones are kept. */

	if (verbose)
		printf("Entering verify...\n");

	if (insert_books())
		return 1;

	if (print_books(5))
		return 1;

	if (print_views())
		return 1;

	return (0);

err:		die_on_error();
}


int insert_books() {
	EXEC SQL
		WHENEVER SQLERROR CONTINUE;

	EXEC SQL
		INSERT INTO BOOKS VALUES ('BU1032','The Busy Executive''s Database Guide','172-32-1176');

	EXEC SQL
		INSERT INTO BOOKS VALUES ('BU1111','Cooking with Computers: Surreptitious Balance Sheets',
			'213-46-8915');

	EXEC SQL
		INSERT INTO BOOKS VALUES ('BU2075','You Can Combat Computer Stress!','238-95-7766');

	EXEC SQL
		INSERT INTO BOOKS VALUES ('BU7832','Straight Talk About Computers','267-41-2394');

	EXEC SQL   /* record should be rejected */
		INSERT INTO BOOKS VALUES ('BU1032','Silicon Valley Gastronomic Treats','274-80-9391');

	EXEC SQL
		INSERT INTO BOOKS VALUES ('MC3021','The Gourmet Microwave','341-22-1782');

	if (verbose)
		printf("Inserted 6 records, 1 unique key violation.\n");

	EXEC SQL
		WHENEVER SQLERROR GO TO err;

	EXEC SQL
		COMMIT WORK;

	return (0);

err:		die_on_error();
}

int print_books(int num_expected)
{

	char book_id[12];
	char book_name[81];
	char book_auth_id[12];
	int i=0;

	EXEC SQL
		DECLARE BOOK_CURSOR CURSOR FOR
		SELECT * FROM BOOKS;

	EXEC SQL
		OPEN BOOK_CURSOR;

	EXEC SQL
		FETCH BOOK_CURSOR INTO :book_id, :book_name, :book_auth_id;

	while (!SQLCODE) {
		printf("%s,%s,%s\n", book_id, book_name, book_auth_id);
		i++;

		EXEC SQL
			FETCH BOOK_CURSOR INTO :book_id, :book_name, :book_auth_id;
	}

	EXEC SQL
		CLOSE BOOK_CURSOR;

	EXEC SQL
		COMMIT WORK;

	printf("Number expected: %d, number found: %d.\n", num_expected, i);

	return 0;
err:		die_on_error();
}

int strupper(char* targ, char* source)
{
	int ii;

	for (ii=0; *targ++ = toupper(*source++); ii++);

	return ii;
}

int istable(char* tname)
{
	int exists;
	char *utname;

	if (!tname)
		return 0;

	utname = (char *) malloc(strlen(tname)+1);

	strupper(utname, tname);

	EXEC SQL
		SELECT COUNT (*)
		INTO :exists
		FROM rdb$relations
		WHERE rdb$relation_name = :utname;

	EXEC SQL
		ROLLBACK WORK;

	free(utname);

	return exists;
err:
	free(utname);
	die_on_error();
}

void die_on_error()

/* Print out error message and die*/
{
	printf ("Data base error, SQLCODE = %d\n", SQLCODE);
	isc_print_status(gds_status);
	EXEC SQL
		ROLLBACK WORK;
err:
	exit (1);
}


$ GPRE tab_uniq.epp -d WHERE_GDB:atlas.gdb
$ CXX FLAG_CXX tab_uniq.cpp
$ LINK FLAG_LINK tab_uniq pr_views
$ RUN tab_uniq
$DROP WHERE_GDB:atlas.gdb
$ DELETE tab_uniq*
