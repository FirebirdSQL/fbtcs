
#
#By:          Clare Taylor
#Date:        03/14/94
#Test name:   IDML_C_SUBQ_02
#Series:      IDML_C_SUBQUERYS
#Results:     Passes: The table TEST_TABLE1 is populated
#Dependency:  none
#History:
#4/13/94:     Adding set names statements.  Fails in Q no matter what
#	     I do because transliteration may not be working well
#	     between fields.
#5/26/94:     The .e program is not returning any rows in this build.
#	     I get 802 translit err. could be something in the code of
#	     the test that got by in previous builds? Init rec. shows
#	     all 7 rows returned.  T-build can't translit the 437 field
#	     to iso when it was loaded using iso...do some qli scripts
#	     to try to see if its a bug.
#6/7/94:      adding -m option to ISQL stuff.
#
# /* Build S allowed this:
#    EXEC SQL
#      FETCH C_SEL INTO :p_enus, :p_france, :p_437;
#      Build T fails w/translit error due to p_437--take it out */
#
#Description:
#Simple insert using a subquery on a subset of rows from the static
#table.  Selects the data from the test table using a cursor in embedded
#SQL.  The other tests in this series just use ISQL to verify the action
#of the insert or update.
#

>> subq3.e
/*-------------------------------------------------------------------
  Case:  1  INSERT INTO TEST_TABLE SELECT [subset] FROM STRING_TABLE
---------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
EXEC SQL DATABASE db = "WHERE_GDB:tests.gdb";
EXEC SQL WHENEVER SQLERROR GOTO err;
EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
  BASED_ON STRING_TABLE.S_ROWID       p_rowid;
  BASED_ON STRING_TABLE.C_ENUS        p_enus;
  BASED_ON STRING_TABLE.C_FRANCE      p_france;
  BASED_ON STRING_TABLE.C_437_25      p_437;
EXEC SQL END DECLARE SECTION;

static void print_error()
{
    if (SQLCODE != 100)
        printf ("DATABASE ERROR, SQLCODE = %d \n", SQLCODE);
}
void sql_insert1()
{
EXEC SQL DELETE FROM TEST_TABLE2;
EXEC SQL DELETE FROM TEST_TABLE1;

EXEC SQL INSERT INTO TEST_TABLE1
     SELECT S_ROWID, C_ENUS, C_FRANCE, C_437_25 FROM STRING_TABLE;
EXEC SQL COMMIT;

return;
err: print_error();
}

void dos_select()
{
   printf("DOS SET NAMES, SELECT DOS FIELD INSERTED BY THE SUBQUERY:\n\n");

   EXEC SQL DECLARE C_DOS CURSOR FOR
        SELECT S_ROWID, C_437_25
        FROM TEST_TABLE1;

   EXEC SQL OPEN C_DOS;

   while (SQLCODE == 0)
     {
      EXEC SQL
         FETCH C_DOS INTO :p_rowid, :p_437;
      if (SQLCODE == 100)
          {
           printf("No more rows found\n");
           return;
          }
       else  printf("Found: %d %s\n",p_rowid, p_437);
      }
    EXEC SQL CLOSE C_DOS;
    return;
err: print_error();
}

void iso_select()
{
   printf("ISO SET NAMES, SELECT ISO FIELDS INSERTED BY THE SUBQUERY:\n\n");

   EXEC SQL
       DECLARE C_SEL CURSOR FOR
           SELECT S_ROWID, C_ENUS, C_FRANCE
           FROM TEST_TABLE1;

   EXEC SQL OPEN C_SEL;

while (SQLCODE == 0)
  {
   EXEC SQL
      FETCH C_SEL INTO :p_rowid, :p_enus, :p_france;
   if (SQLCODE == 100)
       {
        printf("No more rows found\n");
        return;
       }
    else  printf("Found: %d %s %s\n",p_rowid, p_enus, p_france);
   }
EXEC SQL CLOSE C_SEL;
dos_select();
return;
err: print_error();
}
int main()
{
char p_setnames[10];

     strcpy(p_setnames,"ISO8859_1");
     EXEC SQL SET NAMES :p_setnames;
     EXEC SQL CONNECT db;
     sql_insert1();
     iso_select();
     dos_select();      /* fails in T because set names must be dos */
     EXEC SQL COMMIT RELEASE;

     strcpy(p_setnames,"DOS437");
     EXEC SQL SET NAMES :p_setnames;
     EXEC SQL CONNECT db;
     dos_select();

     return 0;
err: print_error();
}
>> subq3.sql
SET NAMES ISO8859_1;
connect "WHERE_GDB:tests.gdb";
delete from TEST_TABLE1;
delete from TEST_TABLE2;
commit;
INSERT INTO TEST_TABLE1
    SELECT S_ROWID, C_ENUS, C_FRANCE, C_437_25 FROM STRING_TABLE;
commit;
select count(*) from test_table1;
INSERT INTO TEST_TABLE2 SELECT * FROM TEST_TABLE1;
select count(*) from test_table1;
select count(*) from test_table2;
commit;
select c_enus, c_france from test_table1;
select c_enus, c_france from test_table2;

>> dos437.sql
SET NAMES DOS437;
connect "WHERE_GDB:tests.gdb";
select c_437_25 from test_table1;
quit;
>> isosel.sql
SET NAMES ISO8859_1;
connect "WHERE_GDB:tests.gdb";
select c_437_25 from test_table1;
quit;
$ GPRE subq3.e
$ CC FLAG_CC subq3.c
$ LINK FLAG_LINK subq3
$ RUN subq3
$ ISQL -i dos437.sql -m
$ ISQL -i isosel.sql -m

$ ISQL -i subq3.sql -m
$ ISQL -i dos437.sql -m
$ DELETE isosel.sql dos437.sql subq3*
