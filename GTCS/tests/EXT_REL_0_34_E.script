
$CREATE COMMENT
*******************************************************************************
 
Test Name:  	EXT_REL_0_34_E
Test Level:     0
Series Name:    EXT_LEV_0
Date:  		July 5, 1994
Author:  	Scott Van Voris
Bug: 

Description:    This is a Level 0 test which is designed to verify that 
                a table created in an external file may not contain a  
                foreign key definition. 

                In this case a foreign key would have been used to create
                an index on the table.  Since this is not allowed we see
                a database error returned instead.

 
Expected Output:       **  We should get some appropriate error message and 
			InterBase should gracefully exit without creating
			the index (or table?).  **
History:

1996-Nov-06 David Schnepper	
  Added WHENEVER SQLERROR CONTINUE to the error handling.

2-Oct-95:  Mark
  Removed the Cleanup / Setup comments from the test.
  Also, added WHERE_GDB and RUN drop_gdb to the tests. 

3-Oct-95: Marco
  Added the WHERE_GDB_EXTERNAL, so the external file can be created 
  by the server in the correct place when accessing data remotely.
  Also, I removed any referance to DIR external.dat and TYPE external.dat
  which would also fail when running remotely.

*******************************************************************************
$CREATE column.e
#include <stdio.h>
#include <stdlib.h>

EXEC SQL
	INCLUDE SQLCA

EXEC SQL
	WHENEVER SQLERROR GO TO ERR;


main(int argc, char* argv[])
{

EXEC SQL
	CREATE DATABASE "WHERE_GDB:ext_rel_0_34_E.gdb";

EXEC SQL
	CREATE TABLE int_table 
		(field1 SMALLINT NOT NULL PRIMARY KEY);

/* Illegal statement due to the Constraint clause*/
EXEC SQL
	CREATE TABLE ext_table EXTERNAL FILE "WHERE_GDB_EXTERNAL:external.dat"
		(field1 SMALLINT NOT NULL,
		field2 SMALLINT,
		CONSTRAINT for_key FOREIGN KEY (field1) REFERENCES int_table (field1));

exit(0);
ERR:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	fprintf(stderr, "Data base error, SQLCODE = %d\n", SQLCODE);
	fflush(stderr);
	isc_print_status (gds__status);

	EXEC SQL
		ROLLBACK RELEASE;

	exit(1);
}
$CREATE isql.in

CONNECT "WHERE_GDB:ext_rel_0_34_E.gdb";
SHOW TABLE ext_table;

$GPRE column.e
$CC FLAG_CC column.c
$LINK FLAG_LINK column
$RUN column
$ISQL -m -input isql.in
$DROP WHERE_GDB:ext_rel_0_34_E.gdb
$DELETE_REM WHERE_GDB: WHERE_GDB_EXTERNAL: external.dat
$DELETE COMMENT isql.in column*
